"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const Subject_1 = require("rxjs/Subject");
const theme_option_1 = require("./theme.option");
exports.light = "light";
exports.dark = "dark";
let ThemeService = class ThemeService {
    constructor(options) {
        this.options = options;
        this.themeSource = new Subject_1.Subject();
        this.missionTheme$ = this.themeSource.asObservable();
        this.defaultTheme = exports.light;
    }
    get currentTheme() {
        return this._currentTheme;
    }
    use(themeName) {
        let theme = this.getCurrentTheme(themeName);
        if (!theme) {
            return;
        }
        let themeLink = document.querySelector(`link[theme="${theme.value}"]`);
        if (!themeLink) {
            let link = document.querySelector('link[theme-position]');
            if (!link) {
                link = document.createElement('link');
                document.head.insertBefore(link, document.querySelector('link[theme]'));
            }
            else {
                link.removeAttribute('theme-position');
            }
            link.setAttribute('theme', theme.value);
            link.setAttribute('rel', 'stylesheet');
            link.setAttribute('href', theme.path.view);
        }
        document.documentElement.setAttribute('class', "theme-" + theme.value);
        this._currentTheme = theme.value;
        this.themeSource.next(theme);
    }
    getCurrentTheme(themeName) {
        for (let theme of this.options.theme) {
            if (theme.value == themeName) {
                return theme;
            }
        }
        return null;
    }
};
ThemeService = __decorate([
    core_1.Injectable(),
    __param(0, core_1.Inject(theme_option_1.THEME_OPTION)), __param(0, core_1.Optional()),
    __metadata("design:paramtypes", [Object])
], ThemeService);
exports.ThemeService = ThemeService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRoZW1lTW9kdWxlL3RoZW1lLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBNkQ7QUFDN0QsMENBQXVDO0FBRXZDLGlEQUEwRTtBQUk3RCxRQUFBLEtBQUssR0FBVyxPQUFPLENBQUM7QUFDeEIsUUFBQSxJQUFJLEdBQVcsTUFBTSxDQUFDO0FBR25DLElBQWEsWUFBWSxHQUF6QjtJQVFJLFlBQXVELE9BQXVDO1FBQXZDLFlBQU8sR0FBUCxPQUFPLENBQWdDO1FBSHRGLGdCQUFXLEdBQUcsSUFBSSxpQkFBTyxFQUFVLENBQUM7UUFJeEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3JELElBQUksQ0FBQyxZQUFZLEdBQUcsYUFBSyxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFXLFlBQVk7UUFDbkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzlCLENBQUM7SUFFTSxHQUFHLENBQUMsU0FBaUI7UUFDeEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1IsT0FBTztTQUNWO1FBQ0QsSUFBSSxTQUFTLEdBQWdCLFFBQVEsQ0FBQyxhQUFhLENBQUMsZUFBZSxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ1osSUFBSSxJQUFJLEdBQWdCLFFBQVEsQ0FBQyxhQUFhLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUN2RSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNQLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0QyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2FBQzNFO2lCQUFNO2dCQUNILElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzthQUMxQztZQUNELElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN4QyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlDO1FBQ0QsUUFBUSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFFBQVEsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTyxlQUFlLENBQUMsU0FBaUI7UUFDckMsS0FBSyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtZQUNsQyxJQUFJLEtBQUssQ0FBQyxLQUFLLElBQUksU0FBUyxFQUFFO2dCQUMxQixPQUFPLEtBQUssQ0FBQzthQUNoQjtTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKLENBQUE7QUFoRFksWUFBWTtJQUR4QixpQkFBVSxFQUFFO0lBU0ssV0FBQSxhQUFNLENBQUMsMkJBQVksQ0FBQyxDQUFBLEVBQUUsV0FBQSxlQUFRLEVBQUUsQ0FBQTs7R0FSckMsWUFBWSxDQWdEeEI7QUFoRFksb0NBQVkiLCJmaWxlIjoidGhlbWVNb2R1bGUvdGhlbWUuc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgT3B0aW9uYWwgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMvU3ViamVjdCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcbmltcG9ydCB7IElUaGVtZU1vZHVsZU9wdGlvbiwgVEhFTUVfT1BUSU9OLCBJVGhlbWUgfSBmcm9tICcuL3RoZW1lLm9wdGlvbic7XG5cbmV4cG9ydCB7IElUaGVtZSB9IGZyb20gJy4vdGhlbWUub3B0aW9uJztcblxuZXhwb3J0IGNvbnN0IGxpZ2h0OiBzdHJpbmcgPSBcImxpZ2h0XCI7XG5leHBvcnQgY29uc3QgZGFyazogc3RyaW5nID0gXCJkYXJrXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaGVtZVNlcnZpY2Uge1xuXG4gICAgcHVibGljIGRlZmF1bHRUaGVtZTogc3RyaW5nO1xuICAgIHByaXZhdGUgX2N1cnJlbnRUaGVtZTogc3RyaW5nO1xuXG4gICAgcHJpdmF0ZSB0aGVtZVNvdXJjZSA9IG5ldyBTdWJqZWN0PElUaGVtZT4oKTtcbiAgICBwdWJsaWMgbWlzc2lvblRoZW1lJDogT2JzZXJ2YWJsZTxJVGhlbWU+O1xuXG4gICAgY29uc3RydWN0b3IoIEBJbmplY3QoVEhFTUVfT1BUSU9OKSBAT3B0aW9uYWwoKSBwcml2YXRlIG9wdGlvbnM6IElUaGVtZU1vZHVsZU9wdGlvbiB8IHVuZGVmaW5lZCwgKSB7XG4gICAgICAgIHRoaXMubWlzc2lvblRoZW1lJCA9IHRoaXMudGhlbWVTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG4gICAgICAgIHRoaXMuZGVmYXVsdFRoZW1lID0gbGlnaHQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBjdXJyZW50VGhlbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRUaGVtZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXNlKHRoZW1lTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGxldCB0aGVtZSA9IHRoaXMuZ2V0Q3VycmVudFRoZW1lKHRoZW1lTmFtZSk7XG4gICAgICAgIGlmICghdGhlbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGhlbWVMaW5rOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGxpbmtbdGhlbWU9XCIke3RoZW1lLnZhbHVlfVwiXWApO1xuICAgICAgICBpZiAoIXRoZW1lTGluaykge1xuICAgICAgICAgICAgbGV0IGxpbms6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbGlua1t0aGVtZS1wb3NpdGlvbl0nKTtcbiAgICAgICAgICAgIGlmICghbGluaykge1xuICAgICAgICAgICAgICAgIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5pbnNlcnRCZWZvcmUobGluaywgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbGlua1t0aGVtZV0nKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxpbmsucmVtb3ZlQXR0cmlidXRlKCd0aGVtZS1wb3NpdGlvbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ3RoZW1lJywgdGhlbWUudmFsdWUpO1xuICAgICAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ3JlbCcsICdzdHlsZXNoZWV0Jyk7XG4gICAgICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZSgnaHJlZicsIHRoZW1lLnBhdGgudmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBcInRoZW1lLVwiICsgdGhlbWUudmFsdWUpO1xuICAgICAgICB0aGlzLl9jdXJyZW50VGhlbWUgPSB0aGVtZS52YWx1ZTtcbiAgICAgICAgdGhpcy50aGVtZVNvdXJjZS5uZXh0KHRoZW1lKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEN1cnJlbnRUaGVtZSh0aGVtZU5hbWU6IHN0cmluZyk6IElUaGVtZSB7XG4gICAgICAgIGZvciAobGV0IHRoZW1lIG9mIHRoaXMub3B0aW9ucy50aGVtZSkge1xuICAgICAgICAgICAgaWYgKHRoZW1lLnZhbHVlID09IHRoZW1lTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGVtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59Il19
