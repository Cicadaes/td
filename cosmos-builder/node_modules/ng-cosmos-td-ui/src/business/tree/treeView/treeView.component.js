"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
let TreeViewComponent = class TreeViewComponent {
    constructor() {
        this.isOnly = false;
    }
    set cmData(cmData) {
        this._cmData = cmData;
    }
    ngOnInit() {
        // console.log(this._cmData,this._cmData.length)
        if (this._cmData.length == 1) {
            this.isOnly = true;
        }
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], TreeViewComponent.prototype, "cmData", null);
TreeViewComponent = __decorate([
    core_1.Component({
        selector: 'cm-treeView',
        template: `

      <div *ngFor="let comment of _cmData" class="ng-star-0" [ngClass]="isOnly?'only':''">
      	<div class="treeView">
      		<div class="treeView-body">
      			<div class="treeView-box" [ngClass]="comment.cComments != false&&comment.cComments.isShow? 'treeview-box':'' ">
      				{{ comment.content }}
      				<div class="treeView-btn" *ngIf="comment.cComments != false">
      					<i class="anticon anticon-plus" (click)="comment.cComments.isShow = true" *ngIf="!comment.cComments.isShow"></i>
      					<i class="anticon anticon-minus" (click)="comment.cComments.isShow = false" *ngIf="comment.cComments.isShow"></i>
      				</div>
      			</div>
      		</div>
      		<cm-treeView *ngIf="comment.cComments != false&&comment.cComments.isShow" [cmData]="comment.cComments" class="treeView-item"></cm-treeView>
      	</div>
      </div>
    `,
        styles: [`
      .treeView-body {
        display: flex;
        justify-content: center;
      }
      .ng-star-0.ng-star-inserted {
        position: relative;
      }
      .ng-star-0.ng-star-inserted:before {
        content: '';
        position: absolute;
        top: -10px;
        left: 0;
        background: #ddd;
        width: 100%;
        height: 2px;
      }
      .ng-star-0.ng-star-inserted:first-child:before {
        width: 50%;
        left: 50%;
      }
      .ng-star-0.ng-star-inserted:last-child:before {
        width: 50%;
      }
      .only.ng-star-0.ng-star-inserted:before {
        width: 0;
      }
      .ng-star-0.ng-star-inserted:after {
        content: '';
        position: absolute;
        top: -10px;
        left: 50%;
        background: #ddd;
        width: 2px;
        height: 17px;
      }
      .treeview-box:before {
        content: '';
        position: absolute;
        top: 100%;
        left: 50%;
        background: #ddd;
        width: 2px;
        height: 20px;
      }
      .treeView-box {
        border: 2px solid #ddd;
        width: 120px;
        height: 40px;
        line-height: 40px;
        text-align: center;
        border-radius: 5%;
        position: relative;
        margin: 7px;
      }
      .treeView-item {
        display: flex;
        justify-content: center;
        margin-top: 20px;
      }
      .treeView-btn {
        width: 15%;
        height: 41%;
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: absolute;
        top: 84%;
        left: 42%;
      }
      .treeView-btn i {
        color: #2d8cf0;
        font-size: 12px;
      }
    `]
    })
], TreeViewComponent);
exports.TreeViewComponent = TreeViewComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1c2luZXNzL3RyZWUvdHJlZVZpZXcvdHJlZVZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsd0NBQWdGO0FBb0doRixJQUFhLGlCQUFpQixHQUE5QjtJQWxHQTtRQW9HSSxXQUFNLEdBQVMsS0FBSyxDQUFDO0lBWXpCLENBQUM7SUFWRyxJQUFJLE1BQU0sQ0FBQyxNQUFVO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFBO0lBQ3pCLENBQUM7SUFFRCxRQUFRO1FBQ0osZ0RBQWdEO1FBQ2hELElBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFDO1lBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFBO1NBQ3JCO0lBQ0wsQ0FBQztDQUNKLENBQUE7QUFWRztJQURDLFlBQUssRUFBRTs7OytDQUdQO0FBTlEsaUJBQWlCO0lBbEc3QixnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGFBQWE7UUFDdkIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7O0tBZ0JUO1FBQ0QsTUFBTSxFQUFFLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBNkVSLENBQUM7S0FDTCxDQUFDO0dBQ1csaUJBQWlCLENBYzdCO0FBZFksOENBQWlCIiwiZmlsZSI6ImJ1c2luZXNzL3RyZWUvdHJlZVZpZXcvdHJlZVZpZXcuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE9uRGVzdHJveSwgSW5wdXQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdjbS10cmVlVmlldycsXG4gICAgdGVtcGxhdGU6IGBcblxuICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgY29tbWVudCBvZiBfY21EYXRhXCIgY2xhc3M9XCJuZy1zdGFyLTBcIiBbbmdDbGFzc109XCJpc09ubHk/J29ubHknOicnXCI+XG4gICAgICBcdDxkaXYgY2xhc3M9XCJ0cmVlVmlld1wiPlxuICAgICAgXHRcdDxkaXYgY2xhc3M9XCJ0cmVlVmlldy1ib2R5XCI+XG4gICAgICBcdFx0XHQ8ZGl2IGNsYXNzPVwidHJlZVZpZXctYm94XCIgW25nQ2xhc3NdPVwiY29tbWVudC5jQ29tbWVudHMgIT0gZmFsc2UmJmNvbW1lbnQuY0NvbW1lbnRzLmlzU2hvdz8gJ3RyZWV2aWV3LWJveCc6JycgXCI+XG4gICAgICBcdFx0XHRcdHt7IGNvbW1lbnQuY29udGVudCB9fVxuICAgICAgXHRcdFx0XHQ8ZGl2IGNsYXNzPVwidHJlZVZpZXctYnRuXCIgKm5nSWY9XCJjb21tZW50LmNDb21tZW50cyAhPSBmYWxzZVwiPlxuICAgICAgXHRcdFx0XHRcdDxpIGNsYXNzPVwiYW50aWNvbiBhbnRpY29uLXBsdXNcIiAoY2xpY2spPVwiY29tbWVudC5jQ29tbWVudHMuaXNTaG93ID0gdHJ1ZVwiICpuZ0lmPVwiIWNvbW1lbnQuY0NvbW1lbnRzLmlzU2hvd1wiPjwvaT5cbiAgICAgIFx0XHRcdFx0XHQ8aSBjbGFzcz1cImFudGljb24gYW50aWNvbi1taW51c1wiIChjbGljayk9XCJjb21tZW50LmNDb21tZW50cy5pc1Nob3cgPSBmYWxzZVwiICpuZ0lmPVwiY29tbWVudC5jQ29tbWVudHMuaXNTaG93XCI+PC9pPlxuICAgICAgXHRcdFx0XHQ8L2Rpdj5cbiAgICAgIFx0XHRcdDwvZGl2PlxuICAgICAgXHRcdDwvZGl2PlxuICAgICAgXHRcdDxjbS10cmVlVmlldyAqbmdJZj1cImNvbW1lbnQuY0NvbW1lbnRzICE9IGZhbHNlJiZjb21tZW50LmNDb21tZW50cy5pc1Nob3dcIiBbY21EYXRhXT1cImNvbW1lbnQuY0NvbW1lbnRzXCIgY2xhc3M9XCJ0cmVlVmlldy1pdGVtXCI+PC9jbS10cmVlVmlldz5cbiAgICAgIFx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBgLFxuICAgIHN0eWxlczogW2BcbiAgICAgIC50cmVlVmlldy1ib2R5IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICB9XG4gICAgICAubmctc3Rhci0wLm5nLXN0YXItaW5zZXJ0ZWQge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB9XG4gICAgICAubmctc3Rhci0wLm5nLXN0YXItaW5zZXJ0ZWQ6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAtMTBweDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgYmFja2dyb3VuZDogI2RkZDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMnB4O1xuICAgICAgfVxuICAgICAgLm5nLXN0YXItMC5uZy1zdGFyLWluc2VydGVkOmZpcnN0LWNoaWxkOmJlZm9yZSB7XG4gICAgICAgIHdpZHRoOiA1MCU7XG4gICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgIH1cbiAgICAgIC5uZy1zdGFyLTAubmctc3Rhci1pbnNlcnRlZDpsYXN0LWNoaWxkOmJlZm9yZSB7XG4gICAgICAgIHdpZHRoOiA1MCU7XG4gICAgICB9XG4gICAgICAub25seS5uZy1zdGFyLTAubmctc3Rhci1pbnNlcnRlZDpiZWZvcmUge1xuICAgICAgICB3aWR0aDogMDtcbiAgICAgIH1cbiAgICAgIC5uZy1zdGFyLTAubmctc3Rhci1pbnNlcnRlZDphZnRlciB7XG4gICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogLTEwcHg7XG4gICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgYmFja2dyb3VuZDogI2RkZDtcbiAgICAgICAgd2lkdGg6IDJweDtcbiAgICAgICAgaGVpZ2h0OiAxN3B4O1xuICAgICAgfVxuICAgICAgLnRyZWV2aWV3LWJveDpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDEwMCU7XG4gICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgYmFja2dyb3VuZDogI2RkZDtcbiAgICAgICAgd2lkdGg6IDJweDtcbiAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgfVxuICAgICAgLnRyZWVWaWV3LWJveCB7XG4gICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICNkZGQ7XG4gICAgICAgIHdpZHRoOiAxMjBweDtcbiAgICAgICAgaGVpZ2h0OiA0MHB4O1xuICAgICAgICBsaW5lLWhlaWdodDogNDBweDtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1JTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBtYXJnaW46IDdweDtcbiAgICAgIH1cbiAgICAgIC50cmVlVmlldy1pdGVtIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIG1hcmdpbi10b3A6IDIwcHg7XG4gICAgICB9XG4gICAgICAudHJlZVZpZXctYnRuIHtcbiAgICAgICAgd2lkdGg6IDE1JTtcbiAgICAgICAgaGVpZ2h0OiA0MSU7XG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiA4NCU7XG4gICAgICAgIGxlZnQ6IDQyJTtcbiAgICAgIH1cbiAgICAgIC50cmVlVmlldy1idG4gaSB7XG4gICAgICAgIGNvbG9yOiAjMmQ4Y2YwO1xuICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICB9XG4gICAgYF1cbn0pXG5leHBvcnQgY2xhc3MgVHJlZVZpZXdDb21wb25lbnQgIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBfY21EYXRhOmFueTtcbiAgICBpc09ubHk6Ym9vbGVhbj1mYWxzZTtcbiAgICBASW5wdXQoKVxuICAgIHNldCBjbURhdGEoY21EYXRhOmFueSl7XG4gICAgICAgIHRoaXMuX2NtRGF0YSA9IGNtRGF0YVxuICAgIH1cbiAgXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuX2NtRGF0YSx0aGlzLl9jbURhdGEubGVuZ3RoKVxuICAgICAgICBpZih0aGlzLl9jbURhdGEubGVuZ3RoID09IDEpe1xuICAgICAgICAgICAgdGhpcy5pc09ubHkgPSB0cnVlXG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=
