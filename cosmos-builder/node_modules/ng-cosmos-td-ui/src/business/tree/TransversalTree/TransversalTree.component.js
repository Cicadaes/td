"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
let TransversalTreeComponent = class TransversalTreeComponent {
    constructor() {
        this.isOnly = false;
    }
    set cmData(cmData) {
        this._cmData = cmData;
    }
    ngOnInit() {
        if (this._cmData.length == 1) {
            this.isOnly = true;
        }
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], TransversalTreeComponent.prototype, "cmData", null);
TransversalTreeComponent = __decorate([
    core_1.Component({
        selector: 'cm-TransversalTree',
        template: `

      <div *ngFor="let comment of _cmData" class="ng-star-0" [ngClass]="isOnly?'only':''">
      	<div class="TransversalTree">
      		<div class="TransversalTree-body">
      			<div class="TransversalTree-box" [ngClass]="comment.cComments != false&&comment.cComments.isShow ?'TransversalTreeBox':'' ">
      				{{ comment.content }}
      				<div class="TransversalTree-btn" *ngIf="comment.cComments != false">
      					<i class="anticon anticon-plus" (click)="comment.cComments.isShow = true" *ngIf="!comment.cComments.isShow"></i>
      					<i class="anticon anticon-minus" (click)="comment.cComments.isShow = false" *ngIf="comment.cComments.isShow"></i>
      				</div>
      			</div>
      		</div>
      		<cm-TransversalTree *ngIf="comment.cComments != false&&comment.cComments.isShow" [cmData]="comment.cComments" class="TransversalTree-item"></cm-TransversalTree>
      	</div>
      </div>
    `,
        styles: [`
      .TransversalTree {
        display: flex;
        justify-content: flex-start;
        align-items: center;
        height: 100%;
      }
      .TransversalTree-box {
        border: 2px solid #ddd;
        width: 120px;
        height: 40px;
        line-height: 40px;
        text-align: center;
        border-radius: 5%;
        position: relative;
        margin: 7px;
      }
      .TransversalTree-item {
        display: flex;
        flex-direction: column;
        justify-content: center;
        margin-left: 20px;
      }
      .TransversalTree-btn {
        width: 14%;
        height: 43%;
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: absolute;
        left: 93%;
        top: 33%;
      }
      .TransversalTree-btn i {
        color: #2d8cf0;
        font-size: 12px;
      }
      .ng-star-0.ng-star-inserted {
        position: relative;
      }
      .ng-star-0.ng-star-inserted:after {
        content: '';
        position: absolute;
        top: 0px;
        left: -10px;
        background: #ddd;
        height: 100%;
        width: 2px;
      }
      .ng-star-0.ng-star-inserted:first-child:after {
        height: 50%;
        top: 50%;
      }
      .ng-star-0.ng-star-inserted:last-child:after {
        height: 50%;
      }
      .only.ng-star-0.ng-star-inserted:last-child:after {
        height: 0;
      }
      .ng-star-0.ng-star-inserted:before {
        content: '';
        position: absolute;
        left: -10px;
        top: 50%;
        background: #ddd;
        height: 2px;
        width: 17px;
      }
      .TransversalTreeBox::before {
        content: '';
        position: absolute;
        left: 103%;
        top: 50%;
        background: #ddd;
        height: 2px;
        width: 17px;
      }
    `]
    })
], TransversalTreeComponent);
exports.TransversalTreeComponent = TransversalTreeComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1c2luZXNzL3RyZWUvVHJhbnN2ZXJzYWxUcmVlL1RyYW5zdmVyc2FsVHJlZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBZ0Y7QUF1R2hGLElBQWEsd0JBQXdCLEdBQXJDO0lBckdBO1FBdUdJLFdBQU0sR0FBUyxLQUFLLENBQUM7SUFXekIsQ0FBQztJQVRHLElBQUksTUFBTSxDQUFDLE1BQVU7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7SUFDekIsQ0FBQztJQUVELFFBQVE7UUFDSixJQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBQztZQUN4QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQTtTQUNyQjtJQUNMLENBQUM7Q0FDSixDQUFBO0FBVEc7SUFEQyxZQUFLLEVBQUU7OztzREFHUDtBQU5RLHdCQUF3QjtJQXJHcEMsZ0JBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxvQkFBb0I7UUFDOUIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7O0tBZ0JUO1FBQ0QsTUFBTSxFQUFFLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBZ0ZSLENBQUM7S0FDTCxDQUFDO0dBQ1csd0JBQXdCLENBYXBDO0FBYlksNERBQXdCIiwiZmlsZSI6ImJ1c2luZXNzL3RyZWUvVHJhbnN2ZXJzYWxUcmVlL1RyYW5zdmVyc2FsVHJlZS5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT25EZXN0cm95LCBJbnB1dCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2NtLVRyYW5zdmVyc2FsVHJlZScsXG4gICAgdGVtcGxhdGU6IGBcblxuICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgY29tbWVudCBvZiBfY21EYXRhXCIgY2xhc3M9XCJuZy1zdGFyLTBcIiBbbmdDbGFzc109XCJpc09ubHk/J29ubHknOicnXCI+XG4gICAgICBcdDxkaXYgY2xhc3M9XCJUcmFuc3ZlcnNhbFRyZWVcIj5cbiAgICAgIFx0XHQ8ZGl2IGNsYXNzPVwiVHJhbnN2ZXJzYWxUcmVlLWJvZHlcIj5cbiAgICAgIFx0XHRcdDxkaXYgY2xhc3M9XCJUcmFuc3ZlcnNhbFRyZWUtYm94XCIgW25nQ2xhc3NdPVwiY29tbWVudC5jQ29tbWVudHMgIT0gZmFsc2UmJmNvbW1lbnQuY0NvbW1lbnRzLmlzU2hvdyA/J1RyYW5zdmVyc2FsVHJlZUJveCc6JycgXCI+XG4gICAgICBcdFx0XHRcdHt7IGNvbW1lbnQuY29udGVudCB9fVxuICAgICAgXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiVHJhbnN2ZXJzYWxUcmVlLWJ0blwiICpuZ0lmPVwiY29tbWVudC5jQ29tbWVudHMgIT0gZmFsc2VcIj5cbiAgICAgIFx0XHRcdFx0XHQ8aSBjbGFzcz1cImFudGljb24gYW50aWNvbi1wbHVzXCIgKGNsaWNrKT1cImNvbW1lbnQuY0NvbW1lbnRzLmlzU2hvdyA9IHRydWVcIiAqbmdJZj1cIiFjb21tZW50LmNDb21tZW50cy5pc1Nob3dcIj48L2k+XG4gICAgICBcdFx0XHRcdFx0PGkgY2xhc3M9XCJhbnRpY29uIGFudGljb24tbWludXNcIiAoY2xpY2spPVwiY29tbWVudC5jQ29tbWVudHMuaXNTaG93ID0gZmFsc2VcIiAqbmdJZj1cImNvbW1lbnQuY0NvbW1lbnRzLmlzU2hvd1wiPjwvaT5cbiAgICAgIFx0XHRcdFx0PC9kaXY+XG4gICAgICBcdFx0XHQ8L2Rpdj5cbiAgICAgIFx0XHQ8L2Rpdj5cbiAgICAgIFx0XHQ8Y20tVHJhbnN2ZXJzYWxUcmVlICpuZ0lmPVwiY29tbWVudC5jQ29tbWVudHMgIT0gZmFsc2UmJmNvbW1lbnQuY0NvbW1lbnRzLmlzU2hvd1wiIFtjbURhdGFdPVwiY29tbWVudC5jQ29tbWVudHNcIiBjbGFzcz1cIlRyYW5zdmVyc2FsVHJlZS1pdGVtXCI+PC9jbS1UcmFuc3ZlcnNhbFRyZWU+XG4gICAgICBcdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYCxcbiAgICBzdHlsZXM6IFtgXG4gICAgICAuVHJhbnN2ZXJzYWxUcmVlIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB9XG4gICAgICAuVHJhbnN2ZXJzYWxUcmVlLWJveCB7XG4gICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICNkZGQ7XG4gICAgICAgIHdpZHRoOiAxMjBweDtcbiAgICAgICAgaGVpZ2h0OiA0MHB4O1xuICAgICAgICBsaW5lLWhlaWdodDogNDBweDtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1JTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBtYXJnaW46IDdweDtcbiAgICAgIH1cbiAgICAgIC5UcmFuc3ZlcnNhbFRyZWUtaXRlbSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBtYXJnaW4tbGVmdDogMjBweDtcbiAgICAgIH1cbiAgICAgIC5UcmFuc3ZlcnNhbFRyZWUtYnRuIHtcbiAgICAgICAgd2lkdGg6IDE0JTtcbiAgICAgICAgaGVpZ2h0OiA0MyU7XG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgbGVmdDogOTMlO1xuICAgICAgICB0b3A6IDMzJTtcbiAgICAgIH1cbiAgICAgIC5UcmFuc3ZlcnNhbFRyZWUtYnRuIGkge1xuICAgICAgICBjb2xvcjogIzJkOGNmMDtcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgfVxuICAgICAgLm5nLXN0YXItMC5uZy1zdGFyLWluc2VydGVkIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgfVxuICAgICAgLm5nLXN0YXItMC5uZy1zdGFyLWluc2VydGVkOmFmdGVyIHtcbiAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAwcHg7XG4gICAgICAgIGxlZnQ6IC0xMHB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiAjZGRkO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIHdpZHRoOiAycHg7XG4gICAgICB9XG4gICAgICAubmctc3Rhci0wLm5nLXN0YXItaW5zZXJ0ZWQ6Zmlyc3QtY2hpbGQ6YWZ0ZXIge1xuICAgICAgICBoZWlnaHQ6IDUwJTtcbiAgICAgICAgdG9wOiA1MCU7XG4gICAgICB9XG4gICAgICAubmctc3Rhci0wLm5nLXN0YXItaW5zZXJ0ZWQ6bGFzdC1jaGlsZDphZnRlciB7XG4gICAgICAgIGhlaWdodDogNTAlO1xuICAgICAgfVxuICAgICAgLm9ubHkubmctc3Rhci0wLm5nLXN0YXItaW5zZXJ0ZWQ6bGFzdC1jaGlsZDphZnRlciB7XG4gICAgICAgIGhlaWdodDogMDtcbiAgICAgIH1cbiAgICAgIC5uZy1zdGFyLTAubmctc3Rhci1pbnNlcnRlZDpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBsZWZ0OiAtMTBweDtcbiAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgIGJhY2tncm91bmQ6ICNkZGQ7XG4gICAgICAgIGhlaWdodDogMnB4O1xuICAgICAgICB3aWR0aDogMTdweDtcbiAgICAgIH1cbiAgICAgIC5UcmFuc3ZlcnNhbFRyZWVCb3g6OmJlZm9yZSB7XG4gICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGxlZnQ6IDEwMyU7XG4gICAgICAgIHRvcDogNTAlO1xuICAgICAgICBiYWNrZ3JvdW5kOiAjZGRkO1xuICAgICAgICBoZWlnaHQ6IDJweDtcbiAgICAgICAgd2lkdGg6IDE3cHg7XG4gICAgICB9XG4gICAgYF1cbn0pXG5leHBvcnQgY2xhc3MgVHJhbnN2ZXJzYWxUcmVlQ29tcG9uZW50ICBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgX2NtRGF0YTphbnk7ICAgXG4gICAgaXNPbmx5OmJvb2xlYW49ZmFsc2U7XG4gICAgQElucHV0KClcbiAgICBzZXQgY21EYXRhKGNtRGF0YTphbnkpe1xuICAgICAgICB0aGlzLl9jbURhdGEgPSBjbURhdGFcbiAgICB9XG4gIFxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICBpZih0aGlzLl9jbURhdGEubGVuZ3RoID09IDEpe1xuICAgICAgICAgICAgdGhpcy5pc09ubHkgPSB0cnVlXG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=
