import { OnInit, OnDestroy, ElementRef, EventEmitter, Renderer2, ChangeDetectorRef } from '@angular/core';
import { CdkConnectedOverlay, ConnectedOverlayPositionChange } from '@angular/cdk/overlay';
import { ControlValueAccessor } from '@angular/forms';
export declare class SortselectorComponent implements OnInit, ControlValueAccessor, OnDestroy {
    private _elementRef;
    private _renderer;
    private _cdr;
    _cmSortOptions: any[];
    selectedOptionModel: any[];
    optionsList: any[];
    value: any[];
    _isOpen: boolean;
    _cmPlaceHolder: string;
    _selectedOptions: any[];
    _searchText: string;
    cmShowSearch: boolean;
    cmMultiple: boolean;
    _triggerWidth: any;
    _el: HTMLElement;
    _mode: string;
    _filterOptions: any[];
    _dropDownPosition: 'top' | 'center' | 'bottom';
    _offsetX: number;
    _cmTooltip: boolean;
    _size: string;
    _class: any;
    optionIsNull: boolean;
    isFirst: boolean;
    constructor(_elementRef: ElementRef, _renderer: Renderer2, _cdr: ChangeDetectorRef);
    onChange: (value: any) => void;
    onTouched: () => void;
    _cdkOverlay: CdkConnectedOverlay;
    trigger: ElementRef;
    searchInputElementRef: any;
    cmSortOptions: any[];
    cmPlaceHolder: string;
    cmMode: string;
    cmTooltip: boolean;
    cmSize: string;
    readonly _arrowCls: any;
    cmClosePanel: EventEmitter<any>;
    setSortArray(cmSortOptions: any[]): any[];
    handlerData(cmSortOptions: any[]): void;
    changeOptionByCode(obj: Object, data: any[]): any[];
    clcikOptionHandler(e: any, option: any): void;
    closeDropDown(): void;
    onClick(e: MouseEvent): void;
    clearSearchText(): void;
    updateWidth(element: HTMLInputElement, text: string): void;
    unSelectMultipleOption(option: any, $event: any): void;
    updateFilterOption(option: any, data: any[]): void;
    checkOptionsIsNull(options: any): void;
    _getTriggerRect(): ClientRect;
    onPositionChange(position: ConnectedOverlayPositionChange): void;
    reposition(): void;
    private _updateValue;
    private initOptions;
    setOptionsUnselected(): void;
    writeValue(value: any | any[]): void;
    registerOnChange(fn: (value: any | any[]) => void): void;
    registerOnTouched(fn: () => void): void;
    onAttach(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
}
