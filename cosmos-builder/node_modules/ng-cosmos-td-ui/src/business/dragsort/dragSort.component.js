"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const Sortable = require("sortablejs");
let CosmosDragSortComponent = class CosmosDragSortComponent {
    constructor() {
        this.onSortEnd = new core_1.EventEmitter();
        this._chooseOptions = [];
    }
    set cmData(columnData) {
        for (let group of columnData) {
            for (let item of group['list']) {
                item['checked'] = item['checked'] ? true : false;
            }
        }
        this._checkOptions = columnData;
    }
    ngOnInit() {
        this.sortable = Sortable.create(this.handllist.nativeElement, {
            handle: '.sortHandle',
            sort: true,
            animation: 150,
            ghostClass: "sortable-ghost",
            chosenClass: "sortable-chosen",
            onUpdate: (evt) => {
                this.onSortEnd.emit(this.getSortEndOptions());
            }
        });
    }
    checkboxChange(event, option) {
        if (option.checked) {
            this._chooseOptions.push(option);
            this.onSortEnd.emit(this.getSortEndOptions());
        }
        else {
            for (let index in this._chooseOptions) {
                if (this._chooseOptions[index] === option) {
                    this._chooseOptions.splice(Number(index), 1);
                    break;
                }
            }
        }
    }
    getSortEndOptions() {
        return this._chooseOptions;
    }
    ngOnDestroy() {
        this.sortable.destroy();
    }
};
__decorate([
    core_1.ViewChild('handllist'),
    __metadata("design:type", core_1.ElementRef)
], CosmosDragSortComponent.prototype, "handllist", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], CosmosDragSortComponent.prototype, "cmData", null);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], CosmosDragSortComponent.prototype, "onSortEnd", void 0);
CosmosDragSortComponent = __decorate([
    core_1.Component({
        selector: 'cm-dragsort',
        template: `
      <main class="container">
          <div class="handllist" #handllist>
              <ng-container *ngFor="let option of _chooseOptions">
                  <ng-container *ngIf="option.checked">
                      <cm-button class="sortHandle">
                          <button nz-button [nzType]="'primary'">{{option.label}}</button>
                      </cm-button>
                  </ng-container>
              </ng-container>
          </div>
          <div class="menulist">
              <ng-container *ngFor="let group of _checkOptions">
                  <div class="groupName">{{group.name}}</div>
                  <ng-container *ngFor="let option of group['list']">
                      <cm-checkbox class="checkHandle">
                          <label nz-checkbox [(ngModel)]="option.checked" (ngModelChange)="checkboxChange($event,option)">
                              <span>{{option.label}}</span>
                          </label>
                      </cm-checkbox>
                  </ng-container>
              </ng-container>
          </div>
      </main>
    `,
        styles: [`
      .container {
        width: 100%;
      }
      .handllist {
        width: 100%;
        padding: 10px 0 0 10px;
        min-height: 48px;
        overflow-y: auto;
        border-left: 1px solid #cccccc;
        border-right: 1px solid #cccccc;
        border-top: 1px solid #cccccc;
      }
      .sortHandle {
        display: inline-block;
        margin-right: 10px;
        margin-bottom: 10px;
      }
      .menulist {
        width: 100%;
        max-height: 250px;
        padding: 10px 0 0 10px;
        border: 1px dotted #cccccc;
        overflow-y: auto;
      }
      .checkHandle {
        display: inline-block;
        margin-right: 10px;
        margin-bottom: 10px;
      }
      .groupName {
        padding-top: 10px;
        padding-bottom: 10px;
      }
    `]
    }),
    __metadata("design:paramtypes", [])
], CosmosDragSortComponent);
exports.CosmosDragSortComponent = CosmosDragSortComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1c2luZXNzL2RyYWdzb3J0L2RyYWdTb3J0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLHdDQUFpSDtBQUNqSCx1Q0FBd0M7QUFrRXhDLElBQWEsdUJBQXVCLEdBQXBDO0lBb0JJO1FBRlUsY0FBUyxHQUFHLElBQUksbUJBQVksRUFBUyxDQUFDO1FBRzVDLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFiUSxJQUFJLE1BQU0sQ0FBQyxVQUFpQjtRQUNqQyxLQUFLLElBQUksS0FBSyxJQUFJLFVBQVUsRUFBRTtZQUMxQixLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7YUFDcEQ7U0FDSjtRQUNELElBQUksQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDO0lBQ3BDLENBQUM7SUFRRCxRQUFRO1FBQ0osSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFO1lBQzFELE1BQU0sRUFBRSxhQUFhO1lBQ3JCLElBQUksRUFBRSxJQUFJO1lBQ1YsU0FBUyxFQUFFLEdBQUc7WUFDZCxVQUFVLEVBQUUsZ0JBQWdCO1lBQzVCLFdBQVcsRUFBRSxpQkFBaUI7WUFDOUIsUUFBUSxFQUFFLENBQUMsR0FBUSxFQUFFLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7WUFDbEQsQ0FBQztTQUNKLENBQUMsQ0FBQztJQUVQLENBQUM7SUFFTyxjQUFjLENBQUMsS0FBWSxFQUFFLE1BQVc7UUFDNUMsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7U0FDakQ7YUFBTTtZQUNILEtBQUssSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtnQkFDbkMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLE1BQU0sRUFBRTtvQkFDdkMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUM3QyxNQUFNO2lCQUNUO2FBQ0o7U0FDSjtJQUNMLENBQUM7SUFFTyxpQkFBaUI7UUFDckIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLENBQUM7SUFHRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM1QixDQUFDO0NBRUosQ0FBQTtBQTNEMkI7SUFBdkIsZ0JBQVMsQ0FBQyxXQUFXLENBQUM7OEJBQVksaUJBQVU7MERBQUM7QUFPckM7SUFBUixZQUFLLEVBQUU7OztxREFPUDtBQUVTO0lBQVQsYUFBTSxFQUFFOzswREFBdUM7QUFsQnZDLHVCQUF1QjtJQWhFbkMsZ0JBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxhQUFhO1FBQ3ZCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBd0JUO1FBQ0QsTUFBTSxFQUFFLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FrQ1IsQ0FBQztLQUNMLENBQUM7O0dBRVcsdUJBQXVCLENBNkRuQztBQTdEWSwwREFBdUIiLCJmaWxlIjoiYnVzaW5lc3MvZHJhZ3NvcnQvZHJhZ1NvcnQuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE9uRGVzdHJveSwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBTb3J0YWJsZSA9IHJlcXVpcmUoJ3NvcnRhYmxlanMnKTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdjbS1kcmFnc29ydCcsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgIDxtYWluIGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImhhbmRsbGlzdFwiICNoYW5kbGxpc3Q+XG4gICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IG9wdGlvbiBvZiBfY2hvb3NlT3B0aW9uc1wiPlxuICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIm9wdGlvbi5jaGVja2VkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPGNtLWJ1dHRvbiBjbGFzcz1cInNvcnRIYW5kbGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBuei1idXR0b24gW256VHlwZV09XCIncHJpbWFyeSdcIj57e29wdGlvbi5sYWJlbH19PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgPC9jbS1idXR0b24+XG4gICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1lbnVsaXN0XCI+XG4gICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGdyb3VwIG9mIF9jaGVja09wdGlvbnNcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJncm91cE5hbWVcIj57e2dyb3VwLm5hbWV9fTwvZGl2PlxuICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgb3B0aW9uIG9mIGdyb3VwWydsaXN0J11cIj5cbiAgICAgICAgICAgICAgICAgICAgICA8Y20tY2hlY2tib3ggY2xhc3M9XCJjaGVja0hhbmRsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgbnotY2hlY2tib3ggWyhuZ01vZGVsKV09XCJvcHRpb24uY2hlY2tlZFwiIChuZ01vZGVsQ2hhbmdlKT1cImNoZWNrYm94Q2hhbmdlKCRldmVudCxvcHRpb24pXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57e29wdGlvbi5sYWJlbH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgIDwvY20tY2hlY2tib3g+XG4gICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICA8L21haW4+XG4gICAgYCxcbiAgICBzdHlsZXM6IFtgXG4gICAgICAuY29udGFpbmVyIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICB9XG4gICAgICAuaGFuZGxsaXN0IHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIHBhZGRpbmc6IDEwcHggMCAwIDEwcHg7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDQ4cHg7XG4gICAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2NjY2NjYztcbiAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2NjY2NjYztcbiAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNjY2NjY2M7XG4gICAgICB9XG4gICAgICAuc29ydEhhbmRsZSB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgfVxuICAgICAgLm1lbnVsaXN0IHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIG1heC1oZWlnaHQ6IDI1MHB4O1xuICAgICAgICBwYWRkaW5nOiAxMHB4IDAgMCAxMHB4O1xuICAgICAgICBib3JkZXI6IDFweCBkb3R0ZWQgI2NjY2NjYztcbiAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcbiAgICAgIH1cbiAgICAgIC5jaGVja0hhbmRsZSB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgfVxuICAgICAgLmdyb3VwTmFtZSB7XG4gICAgICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICAgIH1cbiAgICBgXVxufSlcblxuZXhwb3J0IGNsYXNzIENvc21vc0RyYWdTb3J0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gICAgQFZpZXdDaGlsZCgnaGFuZGxsaXN0JykgaGFuZGxsaXN0OiBFbGVtZW50UmVmO1xuICAgIHByaXZhdGUgc29ydGFibGU6IFNvcnRhYmxlO1xuXG4gICAgX2Nob29zZU9wdGlvbnM6IGFueVtdO1xuXG4gICAgX2NoZWNrT3B0aW9uczogYW55W107XG5cbiAgICBASW5wdXQoKSBzZXQgY21EYXRhKGNvbHVtbkRhdGE6IGFueVtdKSB7XG4gICAgICAgIGZvciAobGV0IGdyb3VwIG9mIGNvbHVtbkRhdGEpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2YgZ3JvdXBbJ2xpc3QnXSkge1xuICAgICAgICAgICAgICAgIGl0ZW1bJ2NoZWNrZWQnXSA9IGl0ZW1bJ2NoZWNrZWQnXSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jaGVja09wdGlvbnMgPSBjb2x1bW5EYXRhO1xuICAgIH1cblxuICAgIEBPdXRwdXQoKSBvblNvcnRFbmQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueVtdPigpO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2Nob29zZU9wdGlvbnMgPSBbXTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5zb3J0YWJsZSA9IFNvcnRhYmxlLmNyZWF0ZSh0aGlzLmhhbmRsbGlzdC5uYXRpdmVFbGVtZW50LCB7XG4gICAgICAgICAgICBoYW5kbGU6ICcuc29ydEhhbmRsZScsXG4gICAgICAgICAgICBzb3J0OiB0cnVlLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiAxNTAsXG4gICAgICAgICAgICBnaG9zdENsYXNzOiBcInNvcnRhYmxlLWdob3N0XCIsXG4gICAgICAgICAgICBjaG9zZW5DbGFzczogXCJzb3J0YWJsZS1jaG9zZW5cIixcbiAgICAgICAgICAgIG9uVXBkYXRlOiAoZXZ0OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uU29ydEVuZC5lbWl0KHRoaXMuZ2V0U29ydEVuZE9wdGlvbnMoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjaGVja2JveENoYW5nZShldmVudDogYW55W10sIG9wdGlvbjogYW55KSB7XG4gICAgICAgIGlmIChvcHRpb24uY2hlY2tlZCkge1xuICAgICAgICAgICAgdGhpcy5fY2hvb3NlT3B0aW9ucy5wdXNoKG9wdGlvbik7XG4gICAgICAgICAgICB0aGlzLm9uU29ydEVuZC5lbWl0KHRoaXMuZ2V0U29ydEVuZE9wdGlvbnMoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCBpbiB0aGlzLl9jaG9vc2VPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Nob29zZU9wdGlvbnNbaW5kZXhdID09PSBvcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hvb3NlT3B0aW9ucy5zcGxpY2UoTnVtYmVyKGluZGV4KSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0U29ydEVuZE9wdGlvbnMoKTogYW55W10ge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hvb3NlT3B0aW9ucztcbiAgICB9XG5cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLnNvcnRhYmxlLmRlc3Ryb3koKTtcbiAgICB9XG5cbn0iXX0=
