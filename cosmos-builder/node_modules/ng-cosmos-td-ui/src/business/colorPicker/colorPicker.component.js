"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var colorPickerComponent_1;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
;
let colorPickerComponent = colorPickerComponent_1 = class colorPickerComponent {
    constructor() {
        this._cmcolor = "#3283fc";
        this._cmPresetColors = ['#ffffff', '#000000', 'rgb(236,64,64)', 'rgb(236,64,64)', '#2889e9', '#e920e9', '#00afc4', '#fff500', '#ff6530', '#00a150', '#fbc9ef', '#b28850', '#00ffff', 'rgb(236,64,64)'];
        this._cmPosition = 'right';
        this._cmPositionOffset = "0%";
        this._cmType = "simple";
        this._isOpen = false;
        this.show = false;
        this.cmcolorchange = new core_1.EventEmitter();
    }
    set cmcolor(cmcolor) {
        this._cmcolor = cmcolor;
    }
    ;
    set cmType(cmType) {
        this._cmType = cmType;
    }
    ;
    set cmPositionOffset(cmPositionOffset) {
        this._cmPositionOffset = cmPositionOffset;
    }
    ;
    set cmPresetColors(cmPresetColors) {
        this._cmPresetColors = cmPresetColors;
    }
    ;
    set cmPosition(cmPosition) {
        this._cmPosition = cmPosition;
    }
    ;
    vote(color) {
        this.cmcolorchange.emit(color);
    }
    ngOnInit() {
    }
    colorchange(color) {
        this.vote(color);
    }
    showChange() {
        this.show = true;
        // console.log(this.show);
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], colorPickerComponent.prototype, "cmcolor", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], colorPickerComponent.prototype, "cmType", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], colorPickerComponent.prototype, "cmPositionOffset", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], colorPickerComponent.prototype, "cmPresetColors", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], colorPickerComponent.prototype, "cmPosition", null);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], colorPickerComponent.prototype, "cmcolorchange", void 0);
colorPickerComponent = colorPickerComponent_1 = __decorate([
    core_1.Component({
        encapsulation: core_1.ViewEncapsulation.None,
        selector: 'cm-color-picker',
        template: `
      <div>
          <input *ngIf="_cmType == 'input'" [value]="_cmcolor" [style.background]="_cmcolor" [cpPresetLabel]="'Preset colors'" [cpPresetColors]="_cmPresetColors" [(colorPicker)]="_cmcolor" (colorPickerChange)="colorchange(_cmcolor)" [cpPosition]="_cmPosition" [cpPositionOffset]="_cmPositionOffset"
              [cpAlphaChannel]="'always'" [cpMaxPresetColorsLength]="20" [cpOutputFormat]="'rgba'" />
          <span *ngIf="_cmType == 'simple'" [style.background]="_cmcolor" [cpPresetLabel]="'Preset colors'" [cpPresetColors]="_cmPresetColors" [(colorPicker)]="_cmcolor" class="color-input" (colorPickerChange)="colorchange(_cmcolor)" [cpPosition]="_cmPosition"
              [cpPositionOffset]="_cmPositionOffset" [cpAlphaChannel]="'always'"></span>
          <span *ngIf="_cmType == 'noRgb'" [style.background]="_cmcolor" [cpPresetLabel]="'Preset colors'" [cpPresetColors]="_cmPresetColors" [(colorPicker)]="_cmcolor" class="color-input" (colorPickerChange)="colorchange(_cmcolor)" [cpPosition]="_cmPosition" [cpPositionOffset]="_cmPositionOffset"></span>
          <span *ngIf="_cmType == 'word'" class="word" [style.color]="_cmcolor" [cpPosition]="'bottom'" [cpPositionOffset]="'50%'" [cpPositionRelativeToArrow]="true" [(colorPicker)]="_cmcolor">Change me!</span>
          <nz-dropdown [nzPlacement]="'bottomLeft'" [nzTrigger]="'click'" *ngIf="_cmType == 'board'">
              <span nz-dropdown [style.background]="_cmcolor" class="color-input"></span>
              <div nz-menu>
                  <span [style.background]="_cmcolor" [cpToggle]="true" [cpDialogDisplay]="'inline'" [cpPresetColors]="_cmPresetColors" [(colorPicker)]="_cmcolor" (colorPickerChange)="colorchange(_cmcolor)"></span>
              </div>
          </nz-dropdown>
      </div>
    `,
        styles: [`
      .color-input {
        display: inline-block;
        border: none;
        width: 20px;
        height: 20px;
        border: 1px solid #ccc;
      }
      .type-policy {
        display: none;
      }
      .hex-text {
        line-height: 20px;
      }
      .hex-text .box:nth-child(1) {
        line-height: 20px;
      }
      .hex-text .box:nth-child(2) {
        display: none;
      }
      .preset-label {
        display: none;
      }
      .color-picker {
        z-index: 98 !important;
      }
      .word {
        font-size: 20px;
      }
      ::ng-deep .btn-xs {
        border: none;
        background: #2d8cf0;
        color: #fff;
        width: 74px;
        height: 28px;
        line-height: 28px;
        border-radius: 5px;
        margin-right: 5px !important;
      }
      ::ng-deep .color-picker .button-area {
        display: flex;
        justify-content: center;
      }
      ::ng-deep .color-picker .arrow {
        border-style: none !important;
      }
      ::ng-deep .color-picker .arrow.arrow-right {
        border-width: 0px 0px !important;
      }
      ::ng-deep .type-policy {
        display: none !important;
      }
      ::ng-deep .hsla-text {
        display: none !important;
      }
      ::ng-deep .color-picker .hsla-text .box,
      ::ng-deep .color-picker .rgba-text .box {
        display: none !important;
      }
      ::ng-deep .color-picker .saturation-lightness {
        width: 100%;
      }
      ::ng-deep .color-picker {
        width: 212px;
      }
      ::ng-deep .picker .rgba-text {
        display: none !important;
        font-size: 11px;
      }
      ::ng-deep .color-picker .hue-alpha {
        margin-bottom: 0 !important;
      }
      ::ng-deep .color-picker .box {
        padding: 0 !important;
      }
      ::ng-deep .color-picker {
        z-index: 98;
      }
    `],
        providers: [
            {
                provide: forms_1.NG_VALUE_ACCESSOR,
                useExisting: core_1.forwardRef(() => colorPickerComponent_1),
                multi: true
            }
        ]
    })
], colorPickerComponent);
exports.colorPickerComponent = colorPickerComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
