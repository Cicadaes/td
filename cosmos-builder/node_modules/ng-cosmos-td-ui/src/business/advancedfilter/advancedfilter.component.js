"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var AdvancedFilterComponent_1;
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
const cloneDeep = require('lodash.clonedeep');
function toBoolean(value) {
    return value === '' || (value && value !== 'false');
}
function toArray(value) {
    let ret;
    if (value == null) {
        ret = [];
    }
    else if (!Array.isArray(value)) {
        ret = [value];
    }
    else {
        ret = value;
    }
    return ret;
}
let AdvancedFilterComponent = AdvancedFilterComponent_1 = class AdvancedFilterComponent {
    constructor(_elementRef, _render, _cdr) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._cdr = _cdr;
        this._prefixCls = 'cm-filter';
        this._popupVisible = false;
        this._options = [];
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this.cmRequired = false;
        /** Property name for getting `value` in the option */
        this.cmValueProperty = 'value';
        /** Property name for getting `label` in the option */
        this.cmLabelProperty = 'label';
        this.tabIndex = '0';
        /** Event: emit on popup show or hide */
        this.cmVisibleChange = new core_1.EventEmitter();
        /** Event: emit on values changed */
        this.cmChange = new core_1.EventEmitter();
        /**
         * Event: emit on option selected, event data：{option: any, index: number}
         */
        this.cmSelect = new core_1.EventEmitter();
        /**
         * Event: emit on option unselected, event data：{option: any, index: number}
         */
        this.cmUnSelect = new core_1.EventEmitter();
        /** Event: emit on the clear button clicked */
        this.cmClear = new core_1.EventEmitter();
        this._el = this._elementRef.nativeElement;
    }
    getArrowCls(node) {
        return {
            [`${this._prefixCls}-picker-arrow`]: true,
            [`${this._prefixCls}-picker-arrow-expand`]: (node.expand || node.visible)
        };
    }
    /** 获取菜单中分类列表的样式 */
    get _classifyCls() {
        return {
            [`${this._prefixCls}-classify`]: true,
            [`${this.cmColumnClassName}`]: this.cmColumnClassName,
            [`${this._prefixCls}-edge`]: true,
            [`clearfix`]: true
        };
    }
    getPanelCls(node) {
        return {
            [`${this._prefixCls}-menus`]: true,
            [`${this._prefixCls}-menus-hidden`]: !node.visible,
            [`${this.cmColumnClassName}`]: this.cmColumnClassName,
            [`dropdownlist-content`]: true,
            [`${this._prefixCls}-tagwrap`]: !node.advanced,
            [`multi-mode`]: false,
        };
    }
    getMenuCls(node) {
        return {
            [`${this._prefixCls}-menuwrap`]: true,
            [`${this.cmPopupClassName}`]: this.cmPopupClassName,
            [`line1height`]: node.showOneLine && !node.expand && !node.multi,
            [`line2height`]: !node.showOneLine && !node.expand && !node.multi,
            [`autoheight`]: node.advanced || node.expand || node.multi,
            [`multi-mode`]: node.multi
        };
    }
    getButtonCls(childNode) {
        return {
            [`${this._prefixCls}-button`]: true,
            [`button-group `]: true,
            [`visible`]: (!childNode || childNode.visible)
        };
    }
    getSaveButtonCls(node) {
        return {
            [`saveMultiMode`]: true,
            [`btn `]: true,
            [`save`]: true,
            [`active`]: node.checked
        };
    }
    get _operationCls() {
        return {
            [`${this._prefixCls}-operational`]: true,
            [`morewrap`]: true,
        };
    }
    getItemCls(node) {
        return {
            [`${this._prefixCls}-menus`]: true,
            [`${this.cmPopupClassName}`]: this.cmPopupClassName,
            [`brands`]: !node.advanced,
            [`all`]: true,
            [`brands-cate`]: !node.showOneLine && !node.advanced,
            [`attr-items`]: node.advanced,
        };
    }
    /** 获取列中Option的样式 */
    getOptionCls(node, option, index) {
        return {
            [`${this._prefixCls}-menu-item`]: true,
            [`${this._prefixCls}-menu-item-expand`]: !node.isLeaf,
            [`${this._prefixCls}-menu-item-active`]: node.visible,
            [`${this._prefixCls}-menu-item-seleted`]: !node.advanced && option.checked,
            [`${this._prefixCls}-multiItem`]: true,
            [`list-item `]: node.visible,
            [`dditem`]: node.advanced,
            [`active`]: option.visible,
        };
    }
    /** 获取Option的值，例如，可以指定labelProperty="name"来取Name */
    getOptionLabel(option) {
        return option[this.cmLabelProperty || 'label'];
    }
    /** 获取Option的值，例如，可以指定valueProperty="id"来取ID */
    getOptionValue(option) {
        return option[this.cmValueProperty || 'value'];
    }
    /** 由用户来定义点击后是否变更 */
    _isChangeOn(option, index) {
        if (typeof this.cmChangeOn === 'function') {
            return this.cmChangeOn(option, index) === true;
        }
        return false;
    }
    _onTriggerClick(event) {
        this.onTouched(); // set your control to 'touched'
        const popupEl = this.menu && this.menu.nativeElement;
        if (popupEl && popupEl.contains(event.target)) {
            return; // 还在菜单内部
        }
    }
    _onTriggerMouseLeave(event) {
        //const currEl = this._el;
        const popupEl = this.menu && this.menu.nativeElement;
        if (popupEl && popupEl.contains(event.target)) {
            return; // 还在菜单内部
        }
    }
    closeMenu() {
        this._clearDelayTimer();
        this.setPopupVisible(false);
    }
    setPopupVisible(popupVisible) {
        if (this._popupVisible !== popupVisible) {
            this._popupVisible = popupVisible;
            if (popupVisible) {
                if (!this._clickOutsideHandler) {
                    this._clickOutsideHandler = this._render.listen('document', 'mousedown', this._onDocumentClick.bind(this));
                }
                // always hide on mobile
                if (!this._touchOutsideHandler) {
                    this._touchOutsideHandler = this._render.listen('document', 'touchstart', this._onDocumentClick.bind(this));
                }
            }
            if (!popupVisible) {
                this._clearOutsideHandler();
            }
            this.cmVisibleChange.emit(popupVisible);
        }
    }
    _onDocumentClick(event) {
        const target = event.target;
        const popupEl = this.menu && this.menu.nativeElement;
        if (!this._el.contains(target) && !popupEl.contains(target)) {
            this.setPopupVisible(false);
        }
    }
    _clearOutsideHandler() {
        if (this._clickOutsideHandler) {
            this._clickOutsideHandler(); // Removes "listen" listener
            this._clickOutsideHandler = null;
        }
        if (this._touchOutsideHandler) {
            this._touchOutsideHandler(); // Removes "listen" listener
            this._touchOutsideHandler = null;
        }
    }
    _clearDelayTimer() {
        if (this._delayTimer) {
            clearTimeout(this._delayTimer);
            this._delayTimer = null;
        }
    }
    onExpandClick(option, index, event) {
        event.preventDefault();
        option.expand = !option.expand;
    }
    onMultiClick(option, index, event) {
        event.preventDefault();
        event.stopPropagation();
        option.multi = !option.multi;
    }
    checkNecessary(node, option, index) {
        let pnode = node.advanced ? node.items[index] : node;
        if (pnode.isNecessary) {
            let only = true;
            let arr = pnode.items;
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].value != option.value && arr[i].checked) {
                    only = false;
                    break;
                }
            }
            if (only) {
                return true;
            }
        }
        if (this.cmRequired && option.checked) {
            let only = true;
            let arr = this._selectedOptions && this._selectedOptions[pnode.value] || [];
            for (let key in this._selectedOptions) {
                if (key != pnode.value) {
                    if (this._selectedOptions[key] && this._selectedOptions[key].length) {
                        only = false;
                        break;
                    }
                }
            }
            if (only) {
                if (arr.length <= 1) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * 设置某列的激活的菜单选项
     *
     * @param option 菜单选项
     * @param index  选项所在的列组的索引
     */
    setActiveOption(node, option, index) {
        if (!node || !option) {
            return;
        }
        if (!this._activatedOptions) {
            this._activatedOptions = {};
        }
        if (option.checked) {
            this.cmSelect.emit({ option, index });
            if (node.advanced && node.items && node.items[index]) {
                node.items[index].checked = true;
                if (!this._activatedOptions[node.items[index].value]) {
                    this._activatedOptions[node.items[index].value] = [];
                }
                if (node.multi) {
                    this._activatedOptions[node.items[index].value].push(option.value);
                }
                else {
                    for (let i = 0; i < node.items[index].items.length; i++) {
                        if (node.items[index].items[i].value != option.value) {
                            node.items[index].items[i].checked = false;
                        }
                    }
                    this._activatedOptions[node.items[index].value] = [option.value];
                }
            }
            else {
                node.checked = true;
                if (!this._activatedOptions[node.value]) {
                    this._activatedOptions[node.value] = [];
                }
                if (node.multi) {
                    this._activatedOptions[node.value].push(option.value);
                }
                else {
                    for (let i = 0; i < node.items.length; i++) {
                        if (node.items[i].value != option.value) {
                            node.items[i].checked = false;
                        }
                    }
                    this._activatedOptions[node.value] = [option.value];
                }
            }
        }
        else {
            this.cmUnSelect.emit({ option, index });
            if (node.advanced && node.items && node.items[index]) {
                if (node.multi) {
                    if (this._activatedOptions[node.items[index].value]) {
                        let len = this._activatedOptions[node.items[index].value].length;
                        for (let i = 0; i < len; i++) {
                            if (option.value == this._activatedOptions[node.items[index].value][i]) {
                                this._activatedOptions[node.items[index].value].splice(i, 1);
                                break;
                            }
                        }
                        if (this._activatedOptions[node.items[index].value] && !this._activatedOptions[node.items[index].value].length) {
                            node.items[index].checked = false;
                            delete this._activatedOptions[node.items[index].value];
                        }
                    }
                }
                else {
                    node.items[index].checked = false;
                    delete this._activatedOptions[node.items[index].value];
                }
            }
            else {
                if (node.multi) {
                    if (this._activatedOptions[node.value]) {
                        let len = this._activatedOptions[node.value].length;
                        for (let i = 0; i < len; i++) {
                            if (option.value == this._activatedOptions[node.value][i]) {
                                this._activatedOptions[node.value].splice(i, 1);
                                break;
                            }
                        }
                        if (!this._activatedOptions[node.value].length) {
                            node.checked = false;
                            delete this._activatedOptions[node.value];
                        }
                    }
                }
                else {
                    node.checked = false;
                    delete this._activatedOptions[node.value];
                }
            }
        }
        this._isChangeOn(option, index);
        if (!node.multi) {
            this._selectedOptions = cloneDeep(this._activatedOptions);
            // 触发变更事件
            this.onValueChange();
        }
    }
    /**
     * 鼠标点击选项
     *
     * @param option 菜单选项
     * @param index 选项所在的列组的索引
     * @param event 鼠标事件
     */
    onOptionClick(node, option, index, event) {
        event.preventDefault();
        event.stopPropagation();
        if (option && option.disabled) {
            return;
        }
        if (option.checked && this.checkNecessary(node, option, index)) {
            return;
        }
        option.checked = !option.checked;
        this.setActiveOption(node, option, index);
    }
    onSelectClick(node, index, event) {
        event.preventDefault();
        event.stopPropagation();
        if (!this._activatedOptions) {
            return;
        }
        if (node.advanced && node.items && node.items[index]) {
            if (this._activatedOptions[node.items[index].value]) {
                this._selectedOptions[node.items[index].value] = this._activatedOptions[node.items[index].value];
                // 触发变更事件
                this.onValueChange();
            }
        }
        else {
            if (this._activatedOptions[node.value]) {
                this._selectedOptions[node.value] = this._activatedOptions[node.value];
                // 触发变更事件
                this.onValueChange();
            }
        }
    }
    onCancelClick(node, index, event) {
        event.preventDefault();
        event.stopPropagation();
        node.multi = !node.multi;
        if (node.advanced && node.items && node.items[index]) {
            let activatedOptions = this._selectedOptions && this._selectedOptions[node.items[index].value] || [];
            let len = node.items[index].items && node.items[index].items.length || 0;
            for (let i = 0; i < len; i++) {
                let tag = false;
                for (let j = 0; j < activatedOptions.length; j++) {
                    if (node.items[index].items[i].value == activatedOptions[j]) {
                        tag = true;
                        break;
                    }
                }
                node.items[index].items[i].checked = tag;
            }
        }
        else {
            let activatedOptions = this._selectedOptions && this._selectedOptions[node.value] || [];
            for (let i = 0; i < node.items.length; i++) {
                let tag = false;
                for (let j = 0; j < activatedOptions.length; j++) {
                    if (node.items[i].value == activatedOptions[j]) {
                        tag = true;
                        break;
                    }
                }
                node.items[i].checked = tag;
            }
        }
    }
    delayInvisible(option, index) {
        this._clearDelayTimer();
        this._delayTimer = setTimeout(() => {
            option.visible = false;
            this._delayTimer = null;
        }, 500);
    }
    /**
     * 鼠标划入选项
     *
     * @param option 菜单选项
     * @param index 选项所在的列组的索引
     * @param event 鼠标事件
     */
    onOptionMouseEnter(node, option, index, event) {
        event.preventDefault();
        if (node.advanced) {
            for (let i = 0; i < node.items.length; i++) {
                node.items[i].visible = false;
            }
            option.visible = true;
        }
    }
    /**
     * 鼠标划出选项
     *
     * @param option 菜单选项
     * @param index 选项所在的列组的索引
     * @param event 鼠标事件
     */
    onOptionMouseLeave(node, option, index, event) {
        event.preventDefault();
        if (node.advanced) {
            this.delayInvisible(option, index);
        }
    }
    /**
     * 鼠标划入选项
     *
     * @param panel 菜单选项
     * @param index 选项所在的列组的索引
     * @param event 鼠标事件
     */
    onPanelMouseEnter(option, index, event) {
        event.preventDefault();
        this._clearDelayTimer();
        option.visible = true;
    }
    /**
     * 鼠标划出选项
     *
     * @param panel 菜单选项
     * @param index 选项所在的列组的索引
     * @param event 鼠标事件
     */
    onPanelMouseLeave(option, index, event) {
        event.preventDefault();
        this.delayInvisible(option, index);
    }
    onValueChange() {
        this.onChange(this._selectedOptions); // Angular need this
        this.cmChange.emit(this._selectedOptions);
    }
    _addHostClass(classname) {
        this._render.addClass(this._el, classname);
    }
    _removeHostClass(classname) {
        this._render.removeClass(this._el, classname);
    }
    writeSelected(array) {
        if (!array || !array.length) {
            return;
        }
        for (let i = 0; i < array.length; i++) {
            let len = array[i].items && array[i].items.length || 0;
            for (let j = 0; j < len; j++) {
                if (!this._selectedOptions) {
                    this._selectedOptions = {};
                }
                if (!this._selectedOptions[array[i].value]) {
                    this._selectedOptions[array[i].value] = [];
                }
                this._selectedOptions[array[i].value].push(array[i].items[j].value);
                for (let m = 0; m < this._options.length; m++) {
                    if (this._options[m].value == array[i].value) {
                        let options = this._options[m].items || [];
                        let optionsLen = options && options.length || 0;
                        for (let n = 0; n < optionsLen; n++) {
                            if (array[i].items[j].value == options[n].value) {
                                options[n]['checked'] = true;
                                break;
                            }
                        }
                        break;
                    }
                }
            }
        }
    }
    /**
     * Write a new value to the element.
     *
     * @Override (From ControlValueAccessor interface)
     */
    writeValue(value) {
        const array = [];
        toArray(value).forEach((v, index) => {
            if (typeof v !== 'object') {
                const obj = {};
                obj[this.cmValueProperty] = v;
                obj[this.cmLabelProperty] = v;
                array[index] = obj;
            }
            else {
                array[index] = v;
            }
        });
        this.writeSelected(array);
        this._activatedOptions = this._selectedOptions;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    ngOnInit() {
        if (this.cmOptions && this.cmOptions.length) {
            this._options = this.cmOptions;
        }
    }
    ngOnDestroy() {
        this._clearDelayTimer();
    }
    ngOnChanges(changes) {
        const cmOptions = changes.cmOptions;
        if (cmOptions && !cmOptions.isFirstChange()) {
            this._options = [];
            const newOptions = cmOptions.currentValue;
            if (newOptions && newOptions.length) {
                this._options.push(newOptions);
            }
        }
    }
    ngAfterViewInit() {
        this._addHostClass(this._prefixCls);
        this._addHostClass(`${this._prefixCls}-picker`);
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AdvancedFilterComponent.prototype, "cmRequired", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AdvancedFilterComponent.prototype, "cmPopupClassName", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AdvancedFilterComponent.prototype, "cmColumnClassName", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], AdvancedFilterComponent.prototype, "cmOptions", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Function)
], AdvancedFilterComponent.prototype, "cmChangeOn", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], AdvancedFilterComponent.prototype, "cmValueProperty", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], AdvancedFilterComponent.prototype, "cmLabelProperty", void 0);
__decorate([
    core_1.ViewChild('menu'),
    __metadata("design:type", core_1.ElementRef)
], AdvancedFilterComponent.prototype, "menu", void 0);
__decorate([
    core_1.HostBinding('attr.tabIndex'),
    __metadata("design:type", Object)
], AdvancedFilterComponent.prototype, "tabIndex", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AdvancedFilterComponent.prototype, "cmVisibleChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AdvancedFilterComponent.prototype, "cmChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AdvancedFilterComponent.prototype, "cmSelect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AdvancedFilterComponent.prototype, "cmUnSelect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AdvancedFilterComponent.prototype, "cmClear", void 0);
__decorate([
    core_1.HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [MouseEvent]),
    __metadata("design:returntype", void 0)
], AdvancedFilterComponent.prototype, "_onTriggerClick", null);
__decorate([
    core_1.HostListener('mouseleave', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [MouseEvent]),
    __metadata("design:returntype", void 0)
], AdvancedFilterComponent.prototype, "_onTriggerMouseLeave", null);
AdvancedFilterComponent = AdvancedFilterComponent_1 = __decorate([
    core_1.Component({
        encapsulation: core_1.ViewEncapsulation.None,
        selector: 'cm-advancedfilter',
        template: `

      <div class="cm-filter-opertaion">
          <div *ngFor="let node of _options; let i = index;" [ngClass]="_classifyCls" [attr.data-key]="i">
              <div class="name">{{ getOptionLabel(node) }}</div>
              <div [ngClass]="getMenuCls(node)">
                  <div class="cm-filter-menu">
                      <div [ngClass]="getItemCls(node)">
                          <span *ngFor="let option of node.items"
                              [attr.data-key]="getOptionValue(option)"
                              [attr.title]="option.title || getOptionLabel(option)"
                              [ngClass]="getOptionCls(node, option, i)"
                              (mouseenter)="onOptionMouseEnter(node, option, i, $event)"
                              (mouseleave)="onOptionMouseLeave(node, option, i, $event)"
                              (click)="onOptionClick(node, option, i, $event)">
                              {{ getOptionLabel(option) }}
                              <i *ngIf="node.advanced" class="anticon anticon-down" [ngClass]="getArrowCls(option)"></i>
                          </span>
                      </div>
                  </div>
                  <div *ngIf="node.multi && !node.advanced" [ngClass]="getButtonCls()">
                      <span [ngClass]="getSaveButtonCls(node)" (click)="onSelectClick(node, i, $event)">确定</span>
                      <span class="btn cancel cancelMultiMode" (click)="onCancelClick(node, i, $event)">取消</span>
                  </div>
              </div>
              <div *ngIf="!node.advanced && !node.multi" [ngClass]="_operationCls">
                  <div class="more ctag" (click)="onExpandClick(node, i, $event)">
                      {{node.expand ? '收起' : '展开'}}
                      <i class="anticon anticon-down" [ngClass]="getArrowCls(node)"></i>
                  </div>
                  <span class="item-multiple openMultiMode" (click)="onMultiClick(node, i, $event)">
                      <i class="cm-iconfont cm-icon-miniplus"></i>
                      <span>多选</span>
                  </span>
              </div>

              <div #menu *ngIf="node.advanced">
                  <div *ngFor="let childnode of node.items; let j = index;" [attr.data-key]="j"
                       [ngClass]="getPanelCls(childnode)"
                       (mouseenter)="onPanelMouseEnter(childnode, i, $event)"
                       (mouseleave)="onPanelMouseLeave(childnode, i, $event)">
                      <div class="clearfix list">
                          <span *ngFor="let option of childnode.items"
                                [attr.data-key]="getOptionValue(option)"
                                [attr.title]="option.title || getOptionLabel(option)"
                                [ngClass]="getOptionCls(childnode, option, i)"
                                (click)="onOptionClick(node, option, j, $event)">
                              {{ getOptionLabel(option) }}
                          </span>

                          <span *ngIf="!node.multi" class="item-multiple openMultiMode" (click)="onMultiClick(node, i, $event)">
                              <i class="cm-iconfont cm-icon-miniplus"></i>
                              <span>多选</span>
                          </span>
                      </div>
                      <div *ngIf="node.multi" [ngClass]="getButtonCls(childnode)">
                          <span [ngClass]="getSaveButtonCls(childnode)" (click)="onSelectClick(node, j, $event)">确定</span>
                          <span class="btn cancel cancelMultiMode" (click)="onCancelClick(node, j, $event)">取消</span>
                      </div>
                  </div>
              </div>
          </div>
      </div>
    `,
        styles: [`
      .cm-filter-picker {
        outline: 0;
      }
      .cm-filter-opertaion {
        margin-bottom: 10px;
        background-color: #fff;
        border: 1px solid #eaeaea;
      }
      .cm-filter-menus-hidden {
        display: none;
      }
      .cm-filter-menu-item-seleted {
        color: #2d8cf0!important;
        font-weight: bold;
      }
      .cm-filter-picker-arrow {
        position: absolute;
        z-index: 1;
        top: 50%;
        right: 5px;
        width: 12px;
        height: 12px;
        margin-top: -6px;
        line-height: 12px;
        color: rgba(0, 0, 0, 0.43);
        display: inline-block;
        font-size: 12px;
        font-size: 9px\\9;
        -webkit-transform: scale(0.75) rotate(0deg);
        transform: scale(0.75) rotate(0deg);
        -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
        zoom: 1;
      }
      .cm-filter-picker-arrow {
        -webkit-filter: none;
        filter: none;
      }
      .cm-filter-picker-arrow::before {
        content: "\\E61D";
        display: block;
        font-family: anticon!important;
        -webkit-transition: -webkit-transform 0.2s ease;
        transition: -webkit-transform 0.2s ease;
        transition: transform .2s ease;
        transition: transform 0.2s ease, -webkit-transform 0.2s ease;
      }
      .cm-filter-menu-item .cm-filter-picker-arrow {
        position: relative;
        right: 0;
      }
      .cm-filter-picker-arrow.cm-filter-picker-arrow-expand:before {
        -webkit-transform: rotate(180deg);
        transform: rotate(180deg);
      }
      .cm-icon-miniplus {
        font-size: 12px;
      }
      .name {
        float: left;
        width: 75px;
        height: 100%;
        padding-top: 15px;
        padding-left: 15px;
        color: #666;
        font-size: 13px;
        line-height: 14px;
        background: #f8f8f8;
      }
      .cm-filter-picker .name {
        font-size: 12px;
        line-height: 12px;
        padding-top: 12px;
        width: 85px;
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
      }
      .cm-filter-edge {
        border-bottom: 1px dotted #eaeaea;
      }
      .all {
        float: left;
        line-height: 22px;
        font-size: 12px;
      }
      .cm-filter-classify {
        position: relative;
        background: #f8f8f8;
      }
      .cm-filter-classify .cm-filter-menuwrap {
        margin-left: 90px;
        padding-right: 42px;
        padding-top: 15px;
        background-color: #fff;
      }
      .cm-filter-opertaion .cm-filter-classify .cm-filter-menuwrap {
        margin-left: 110px;
        padding: 8px 120px 4px 0;
      }
      .cm-filter-classify .cm-filter-menu {
        position: relative;
        height: 28px;
        overflow: hidden;
      }
      .cm-filter-classify .autoheight .cm-filter-menu {
        height: auto;
      }
      .cm-filter-classify .line2height .cm-filter-menu {
        height: 55px;
      }
      .cm-filter-opertaion .cm-filter-classify .line2height .cm-filter-menu {
        height: 48px;
      }
      .cm-filter-opertaion .cm-filter-classify .line1height .cm-filter-menu {
        height: 24px;
      }
      .cm-filter-classify .attr-items {
        position: relative;
      }
      .cm-filter-classify .brands {
        _float: left;
        margin-left: 15px;
        line-height: 14px;
        overflow: auto;
      }
      .cm-filter-classify .brands b {
        display: none;
        position: absolute;
        top: 0;
        right: 4px;
        font-family: "iconfont";
      }
      .cm-filter-classify .brands span {
        float: left;
        display: inline-block;
        position: relative;
        padding-right: 24px;
        margin-bottom: 14px;
        cursor: pointer;
        font-size: 13px;
        text-decoration: none;
        color: #333;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
      }
      .cm-filter-classify .brands span:hover {
        color: #2d8cf0;
      }
      .cm-filter-classify .brands-cate span {
        width: 120px;
      }
      .cm-filter-opertaion .cm-filter-classify .brands span {
        position: relative;
        box-sizing: border-box;
        margin-right: 18px;
        margin-bottom: 4px;
        padding: 3px 5px;
        width: 120px;
        border: 1px solid transparent;
        font-size: 12px;
        line-height: 12px;
      }
      .cm-filter-classify .morewrap {
        position: absolute;
        cursor: pointer;
        top: 15px;
        right: 0;
      }
      .cm-filter-opertaion .cm-filter-classify .morewrap {
        top: 12px;
      }
      .f-cb:after,
      .clearfix:after {
        visibility: hidden;
        display: block;
        font-size: 0;
        content: "\\20 ";
        clear: both;
        height: 0;
      }
      .cm-filter-opertaion .cm-filter-classify .cm-filter-menuwrap .button-group {
        box-sizing: border-box;
        font-size: 0;
        text-align: center;
        padding-bottom: 10px;
        margin-top: 5px;
      }
      .cm-filter-opertaion .cm-filter-classify .cm-filter-menuwrap .button-group {
        display: none;
      }
      .cm-filter-opertaion .cm-filter-classify .cm-filter-menuwrap .button-group.visible {
        display: block;
      }
      .cm-filter-opertaion .cm-filter-classify .cm-filter-menuwrap .button-group .btn {
        display: inline-block;
        width: 48px;
        height: 24px;
        line-height: 24px;
        text-align: center;
        font-size: 12px;
        cursor: pointer;
      }
      .cm-filter-opertaion .cm-filter-classify .cm-filter-menuwrap .button-group .save {
        background: #ccc;
        color: #fff;
      }
      .cm-filter-opertaion .cm-filter-classify .cm-filter-menuwrap .button-group .save.active {
        background: #2d8cf0;
      }
      .cm-filter-opertaion .cm-filter-classify .cm-filter-menuwrap .button-group .cancel {
        border: 1px solid #aaa;
        color: #333;
        margin-left: 10px;
        width: 46px;
        height: 22px;
        line-height: 22px;
      }
      .cm-filter-classify .more {
        position: relative;
        float: right;
        width: 42px;
        margin: auto 15px;
        line-height: 13px;
        font-size: 13px;
        cursor: pointer;
      }
      .cm-filter-opertaion .cm-filter-classify .more {
        margin-left: 0;
        font-size: 12px;
      }
      .cm-filter-opertaion .cm-filter-classify .item-multiple {
        display: inline-block;
        box-sizing: border-box;
        padding: 0 5px;
        height: 20px;
        line-height: 20px;
        color: #333;
        font-size: 12px;
        border: 1px solid #ddd;
        cursor: pointer;
      }
      .cm-filter-opertaion .cm-filter-classify .morewrap .item-multiple {
        float: right;
        margin: -4px 15px 0 0;
      }
      .cm-filter-opertaion .cm-filter-classify .item-multiple .iconfont {
        font-size: 12px;
        color: #333;
        height: 20px;
        line-height: 20px;
        position: relative;
      }
      .cm-filter-opertaion .cm-filter-classify .attr-items span.dditem {
        float: left;
        position: relative;
        border: 1px solid #ddd;
        padding: 3px 5px;
        line-height: 12px;
        font-size: 12px;
        margin: 0 0 4px 20px;
        cursor: pointer;
        color: #333;
      }
      .cm-filter-opertaion .cm-filter-classify .attr-items span.dditem.active {
        border: 1px solid #aaa;
        border-bottom-color: #fff;
        padding-bottom: 7px;
        margin-bottom: 0;
        color: #333;
        z-index: 101;
        text-decoration: none;
      }
      .cm-filter-opertaion .cm-filter-classify .dropdownlist-content {
        position: absolute;
        left: 0;
        top: 31px;
        width: 100%;
        border: 1px solid #aaa;
        background: #fff;
        z-index: 100;
        font-size: 12px;
        line-height: 12px;
        padding-bottom: 11px;
      }
      .cm-filter-opertaion .cm-filter-classify .dropdownlist-content .list {
        position: relative;
        padding-right: 65px;
        margin-bottom: 5px;
        margin-left: -8px;
      }
      .cm-filter-opertaion .cm-filter-classify .dropdownlist-content .list .item-multiple {
        position: absolute;
        right: 9px;
        top: 10px;
      }
      .cm-filter-opertaion .cm-filter-classify .dropdownlist-content span {
        color: #333;
      }
      .cm-filter-opertaion .cm-filter-classify .dropdownlist-content span:hover {
        color: #2d8cf0;
      }
      .cm-filter-opertaion .cm-filter-classify .dropdownlist-content .list-item {
        float: left;
        position: relative;
        margin: 11px 0 0 17px;
        cursor: pointer;
        padding: 3px 22px 3px 5px;
        border: 1px solid transparent;
      }
      .cm-filter-opertaion .cm-filter-classify .dropdownlist-content .button-group {
        display: none;
        box-sizing: border-box;
        font-size: 0;
        margin-top: 8px;
        text-align: center;
      }
      .cm-filter-opertaion .cm-filter-classify .dropdownlist-content .button-group.visible {
        display: block;
      }
      .cm-filter-opertaion .cm-filter-classify .dropdownlist-content.multi-mode .button-group {
        display: block;
      }
      .cm-filter-opertaion .cm-filter-classify .dropdownlist-content .button-group {
        display: none;
        box-sizing: border-box;
        font-size: 0;
        margin-top: 8px;
        text-align: center;
      }
      .cm-filter-opertaion .cm-filter-classify .dropdownlist-content .button-group .btn {
        display: inline-block;
        width: 48px;
        height: 24px;
        line-height: 24px;
        text-align: center;
        font-size: 12px;
        cursor: pointer;
      }
      .cm-filter-opertaion .cm-filter-classify .dropdownlist-content .button-group .save {
        background: #ccc;
        color: #fff;
      }
      .cm-filter-opertaion .cm-filter-classify .dropdownlist-content .button-group .save.active {
        background: #2d8cf0;
      }
      .cm-filter-opertaion .cm-filter-classify .dropdownlist-content .button-group .cancel {
        width: 46px;
        height: 22px;
        line-height: 22px;
        border: 1px solid #aaa;
        color: #333;
        margin-left: 10px;
      }
    `],
        providers: [
            {
                provide: forms_1.NG_VALUE_ACCESSOR,
                useExisting: core_1.forwardRef(() => AdvancedFilterComponent_1),
                multi: true
            }
        ]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        core_1.Renderer2,
        core_1.ChangeDetectorRef])
], AdvancedFilterComponent);
exports.AdvancedFilterComponent = AdvancedFilterComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
