import { OnInit, OnChanges, OnDestroy, SimpleChanges, AfterViewInit, ElementRef, EventEmitter, Renderer2, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export interface FilterOption {
    value?: string;
    label?: string;
    title?: string;
    advanced?: boolean;
    disabled?: boolean;
    sort?: FilterOption;
    items?: FilterOption[];
    [key: string]: any;
}
export declare class AdvancedFilterComponent implements OnInit, OnDestroy, OnChanges, AfterViewInit, ControlValueAccessor {
    private _elementRef;
    private _render;
    private _cdr;
    _el: HTMLElement;
    _prefixCls: string;
    _popupVisible: boolean;
    _selectedOptions: any;
    _activatedOptions: any;
    _options: FilterOption[];
    private _clickOutsideHandler;
    private _touchOutsideHandler;
    private _delayTimer;
    onChange: any;
    onTouched: any;
    cmRequired: boolean;
    /** Additional className of popup overlay */
    cmPopupClassName: string;
    /** Additional className of popup overlay column */
    cmColumnClassName: string;
    /** Options for first column, sub column will be load async */
    cmOptions: FilterOption[];
    /** Change value on selection only if this function returns `true` */
    cmChangeOn: (option: FilterOption, level: number) => boolean;
    /** Property name for getting `value` in the option */
    cmValueProperty: string;
    /** Property name for getting `label` in the option */
    cmLabelProperty: string;
    menu: ElementRef;
    tabIndex: string;
    /** Event: emit on popup show or hide */
    cmVisibleChange: EventEmitter<boolean>;
    /** Event: emit on values changed */
    cmChange: EventEmitter<any[]>;
    /**
     * Event: emit on option selected, event data：{option: any, index: number}
     */
    cmSelect: EventEmitter<{
        option: FilterOption;
        index: number;
    }>;
    /**
     * Event: emit on option unselected, event data：{option: any, index: number}
     */
    cmUnSelect: EventEmitter<{
        option: FilterOption;
        index: number;
    }>;
    /** Event: emit on the clear button clicked */
    cmClear: EventEmitter<any>;
    getArrowCls(node: FilterOption): any;
    /** 获取菜单中分类列表的样式 */
    readonly _classifyCls: any;
    getPanelCls(node: FilterOption): any;
    getMenuCls(node: FilterOption): any;
    getButtonCls(childNode?: FilterOption): any;
    getSaveButtonCls(node: FilterOption): any;
    readonly _operationCls: any;
    getItemCls(node: FilterOption): any;
    /** 获取列中Option的样式 */
    getOptionCls(node: FilterOption, option: FilterOption, index: number): any;
    /** 获取Option的值，例如，可以指定labelProperty="name"来取Name */
    getOptionLabel(option: FilterOption): any;
    /** 获取Option的值，例如，可以指定valueProperty="id"来取ID */
    getOptionValue(option: FilterOption): any;
    /** 由用户来定义点击后是否变更 */
    _isChangeOn(option: FilterOption, index: number): boolean;
    _onTriggerClick(event: MouseEvent): void;
    _onTriggerMouseLeave(event: MouseEvent): void;
    closeMenu(): void;
    setPopupVisible(popupVisible: boolean): void;
    _onDocumentClick(event: MouseEvent): void;
    _clearOutsideHandler(): void;
    _clearDelayTimer(): void;
    onExpandClick(option: FilterOption, index: number, event: Event): void;
    onMultiClick(option: FilterOption, index: number, event: Event): void;
    checkNecessary(node: FilterOption, option: FilterOption, index: number): boolean;
    /**
     * 设置某列的激活的菜单选项
     *
     * @param option 菜单选项
     * @param index  选项所在的列组的索引
     */
    setActiveOption(node: FilterOption, option: FilterOption, index: number): void;
    /**
     * 鼠标点击选项
     *
     * @param option 菜单选项
     * @param index 选项所在的列组的索引
     * @param event 鼠标事件
     */
    onOptionClick(node: FilterOption, option: FilterOption, index: number, event: Event): void;
    onSelectClick(node: FilterOption, index: number, event: Event): void;
    onCancelClick(node: FilterOption, index: number, event: Event): void;
    delayInvisible(option: FilterOption, index: number): void;
    /**
     * 鼠标划入选项
     *
     * @param option 菜单选项
     * @param index 选项所在的列组的索引
     * @param event 鼠标事件
     */
    onOptionMouseEnter(node: FilterOption, option: FilterOption, index: number, event: Event): void;
    /**
     * 鼠标划出选项
     *
     * @param option 菜单选项
     * @param index 选项所在的列组的索引
     * @param event 鼠标事件
     */
    onOptionMouseLeave(node: FilterOption, option: FilterOption, index: number, event: Event): void;
    /**
     * 鼠标划入选项
     *
     * @param panel 菜单选项
     * @param index 选项所在的列组的索引
     * @param event 鼠标事件
     */
    onPanelMouseEnter(option: FilterOption, index: number, event: Event): void;
    /**
     * 鼠标划出选项
     *
     * @param panel 菜单选项
     * @param index 选项所在的列组的索引
     * @param event 鼠标事件
     */
    onPanelMouseLeave(option: FilterOption, index: number, event: Event): void;
    onValueChange(): void;
    constructor(_elementRef: ElementRef, _render: Renderer2, _cdr: ChangeDetectorRef);
    _addHostClass(classname: string): void;
    _removeHostClass(classname: string): void;
    writeSelected(array: FilterOption[]): void;
    /**
     * Write a new value to the element.
     *
     * @Override (From ControlValueAccessor interface)
     */
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
}
