"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const ng_cs_antd_1 = require("ng-cs-antd");
const cmMenuTree_service_1 = require("../cmMenuTree.service");
const createId_1 = require("./createId");
let MenuViewComponent = class MenuViewComponent {
    constructor(confirmServ, cmMenuTreeService) {
        this.confirmServ = confirmServ;
        this.cmMenuTreeService = cmMenuTreeService;
        this.click = false;
        this._hasSelect = true;
        this.onVoted = new core_1.EventEmitter();
    }
    set cmcheckFathser(cmcheckFathser) {
        this._cmcheckFathser = cmcheckFathser;
    }
    ;
    set hasSelect(hasSelect) {
        this._hasSelect = hasSelect;
    }
    ;
    set cmHasChecked(cmHasChecked) {
        this._cmHasChecked = cmHasChecked;
    }
    ;
    set cmHasEllips(cmHasEllips) {
        this._cmHasEllips = cmHasEllips;
    }
    ;
    set cmHasShow(cmHasShow) {
        this._cmHasShow = cmHasShow;
    }
    ;
    set cmHasRadio(cmHasRadio) {
        this._cmHasRadio = cmHasRadio;
    }
    ;
    set cmData(cmData) {
        this._cmData = cmData;
    }
    set cmHasMenu(cmHasMenu) {
        this._cmHasMenu = cmHasMenu;
    }
    ;
    set cmMenu(cmMenu) {
        this._cmMenu = cmMenu;
    }
    ngOnInit() {
    }
    // 移入变色
    enterItems(select) {
        select.ellipsisShow = true;
    }
    // 移出变色
    leavesItems(select) {
        select.ellipsisShow = false;
    }
    // 点击树状
    clickItems(select, data) {
        this.cmMenuTreeService.clickItems(select);
    }
    // 点击菜单项
    select(type, data, select) {
        select.menuShow = false;
        select.ellipsisShow = false;
        if (type == 'delete') {
            this.removeFile(data, select);
        }
        else if (type == 'update') {
            select.readonly = false;
            this.data = data;
            this.element.nativeElement.querySelector(`#input-${select.id}`).focus();
        }
        else if (type == 'create') {
            this.addFile(select);
        }
        else if (type == "move") {
            this.cmMenuTreeService.moveFile(select, data);
        }
        else {
            this.cmMenuTreeService.createMenu(type, select);
        }
    }
    // 输入框失焦
    inputBlur(comment) {
        comment.readonly = true;
        this.element.nativeElement.querySelector(`#input-${comment.id}`).blur();
    }
    // 编辑确认
    updateOK(comment) {
        comment.readonly = true;
        this.cmMenuTreeService.dataChange('update', comment);
    }
    // 删除文件
    removeFile(data, select) {
        let title = '';
        let that = this;
        if (select.children == [] || select.children.length == 0) {
            title = `您是否确认要删除${select.content}`;
        }
        else {
            title = `${select.content}包含多个文件，是否确认删除`;
        }
        this.confirmServ.confirm({
            title: title,
            onOk() {
                for (var i = 0; i < data.length; i++) {
                    if (data[i].id == select.id) {
                        data.splice(i, 1);
                        that.cmMenuTreeService.dataChange('delete', select);
                    }
                }
            },
            onCancel() {
            }
        });
    }
    ;
    // 新增文件
    addFile(select) {
        let scopeId = createId_1.Scope.getInstance().getscope();
        let obj = {
            "id": scopeId,
            "content": "",
            "show": true,
            "ellipsisShow": false,
            "menuShow": false,
            "checked": false,
            "readonly": true,
            "select": false,
        };
        obj['children'] = [];
        obj['customMenu'] = this._cmMenu;
        if (select.checked == true) {
            obj['checked'] = true;
        }
        if (select.children != []) {
            obj.content = '新增文件';
        }
        else {
            obj.content = '新增文件';
            select['children'] = [];
        }
        select['children'].push(obj);
        this.cmMenuTreeService.dataChange('create', select);
    }
    // 复选框操作
    checkChange(value, select) {
        if (value == true) {
            select.checked = true;
            this.cmMenuTreeService.dataChange('checked', select);
            // this.vote(true);
            if (this._cmcheckFathser == true) {
                this.vote(true);
            }
            if (select.children != []) {
                let arr = select.children;
                for (var i = 0; i < arr.length; i++) {
                    arr[i].checked = true;
                    if (arr[i].children != []) {
                        let arr1 = arr[i].children;
                        this.loop(true, arr1);
                    }
                }
            }
        }
        else {
            select.checked = false;
            // this.vote(false);
            if (this._cmcheckFathser == true) {
                this.vote(false);
            }
            this.cmMenuTreeService.dataChange('nocheck', select);
            if (select.children != []) {
                let arr = select.children;
                for (var i = 0; i < arr.length; i++) {
                    arr[i].checked = false;
                    if (arr[i].children != false) {
                        let arr1 = arr[i].children;
                        this.loop(false, arr1);
                    }
                }
            }
        }
    }
    // 循环调用
    loop(type, arr1) {
        for (var i = 0; i < arr1.length; i++) {
            this.checkChange(type, arr1[i]);
        }
    }
    // 复选框
    vote(type) {
        this.onVoted.emit(type);
    }
    // 循环调用复选框
    onVoteds(agreed, data) {
        if (agreed == true) {
            data.checked = true;
            this.vote(true);
        }
        else {
            let arr = data.children;
            let arr1 = [];
            for (var i = 0, len = arr.length; i < len; i++) {
                if (arr[i].checked == false) {
                    arr1.push(arr[i].checked);
                }
                if (arr1[len - 1] == false) {
                    data.checked = false;
                    this.vote(false);
                }
            }
        }
    }
    // 选中单选框
    radioThis(select) {
        this.cmMenuTreeService.selectRadio = select.id;
        this.cmMenuTreeService.getRadio(select);
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], MenuViewComponent.prototype, "cmcheckFathser", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], MenuViewComponent.prototype, "hasSelect", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], MenuViewComponent.prototype, "cmHasChecked", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], MenuViewComponent.prototype, "cmHasEllips", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], MenuViewComponent.prototype, "cmHasShow", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], MenuViewComponent.prototype, "cmHasRadio", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], MenuViewComponent.prototype, "cmData", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], MenuViewComponent.prototype, "cmHasMenu", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], MenuViewComponent.prototype, "cmMenu", null);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], MenuViewComponent.prototype, "onVoted", void 0);
__decorate([
    core_1.ViewChild("root"),
    __metadata("design:type", core_1.ElementRef)
], MenuViewComponent.prototype, "element", void 0);
MenuViewComponent = __decorate([
    core_1.Component({
        selector: 'cm-menuView',
        template: `
      <div #root>
          <div *ngFor="let comment of _cmData">
              <div class="menuView">
                  <div class="menuView-body item-{{comment.id}}" [ngClass]="comment.select && _hasSelect == true? 'clickItem':''" (mouseenter)="enterItems(comment)" (mouseleave)="leavesItems(comment)" (click)="clickItems(comment,_cmData)">
                      <div class="menuView-box">
                          <div class="menuView-icon" *ngIf="_cmHasShow">
                              <i class="anticon anticon-caret-down" (click)="comment.show = false" *ngIf="comment.show&&comment.children.length>0"></i>
                              <i class="anticon anticon-caret-right" (click)="comment.show = true" *ngIf="!comment.show&&comment.children.length>0"></i>
                          </div>
                          <div class="menuView-content">
                              <label nz-checkbox [(ngModel)]="comment.checked" (ngModelChange)="checkChange($event,comment)" *ngIf="_cmHasChecked"></label>
                              <label class="radio" (click)="radioThis(comment)" [ngClass]="comment.radio? 'radio-checked':''" *ngIf="_cmHasRadio"></label>
                              <i class="iconfont icon-kongwenjianjia" *ngIf="comment.children.length == 0"></i>
                              <i class="iconfont icon-wenjianjia1" *ngIf="comment.children.length>0"></i>
                              <div class="input-ok" style="position:relative;">
                                  <input type="text" [(ngModel)]="comment.content" id="input-{{comment.id}}" class="readonly" [readonly]="comment.readonly" [ngClass]="{'writeIn': !comment.readonly}" (keyup.enter)="updateOK(comment)" (blur)="inputBlur(comment)" />
                                  <i class="anticon anticon-check ok" *ngIf="!comment.readonly" (keyup.enter)="updateOK(comment)"></i>
                              </div>
                          </div>
                      </div>
                      <div class="menu" (mouseleave)="comment.menuShow = false" *ngIf="_cmHasMenu == true">
                          <i class="anticon anticon-ellipsis" *ngIf="comment.ellipsisShow&&_cmHasEllips == true" (click)="comment.menuShow = true"></i>
                          <!-- <i class="anticon anticon-ellipsis" (click)="comment.menuShow = true"></i> -->
                          <ul class="menu-list" *ngIf="comment.menuShow == true " (mouseleave)="comment.menuShow = false" class="ant-select-dropdown-menu ant-select-dropdown-menu-vertical ant-select-dropdown-menu-root">
                              <li *ngFor="let menu of comment.customMenu" class="ant-select-dropdown-menu-item ng-tns-c23-38 ng-star-inserted" (click)="select(menu.label,_cmData,comment)">
                                  {{menu.value}}
                              </li>
                          </ul>
                      </div>
                  </div>
                  <cm-menuView *ngIf="comment.children.length>0&&comment.show == true" [cmData]="comment.children" [cmMenu]="_cmMenu" class="menuView-item" (onVoted)="onVoteds($event,comment)" [cmHasChecked]="_cmHasChecked" [cmHasShow]="_cmHasShow" [cmHasRadio]="_cmHasRadio"
                      [cmHasEllips]="_cmHasEllips" [cmHasMenu]="_cmHasMenu" [hasSelect]="_hasSelect" [cmcheckFathser]="_cmcheckFathser"></cm-menuView>
              </div>
          </div>
      </div>
      <!-- [ngClass]="comment.select && _hasSelect == true? 'clickItem':''" -->
    `,
        styles: [`
      .menuView {
        padding-left: 10px;
      }
      .menuView-body {
        display: flex;
        height: 42px;
        align-items: center;
        justify-content: space-between;
        margin-right: 20px;
        border-right: 2px solid #fff;
      }
      .clickItem {
        border-color: #2a6cF0;
        background-color: #ecf6fd;
      }
      .menuView-box {
        width: calc(100% - 20px);
        display: flex;
        align-items: center;
      }
      .menuView-box :hover {
        cursor: pointer;
      }
      .menuView-body:hover .menuView-content {
        color: #2d8cf0;
      }
      .menuView-body:hover .menuView-content i {
        color: #2d8cf0;
      }
      .menuView-icon {
        width: 20px;
      }
      .anticon {
        color: #878e94;
        font-size: 12px;
      }
      .menu {
        width: 20px;
        height: 20px;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .menu i {
        font-size: 14px;
      }
      .menu ul {
        width: 100px;
        position: absolute;
        top: 18px;
        right: -41px;
        text-align: center;
        background: #fff;
        box-shadow: 0 0 10px #ddd;
        z-index: 10000;
        border-radius: 5px;
        z-index: 1;
      }
      .ant-select-dropdown-menu-item {
        line-height: 24px;
      }
      .ant-select-dropdown-menu-item:hover {
        background: #ecf6fd;
        color: #2d8cf0;
        cursor: pointer;
      }
      .readonly {
        border: none;
        width: calc(100% - 20px);
        padding: 3px;
        box-sizing: border-box;
        margin: 0 3px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
      .writeIn {
        border-bottom: 1px solid #ddd;
      }
      .menuView-content {
        position: relative;
        display: flex;
        align-items: center;
      }
      .ok {
        position: absolute;
        right: 0px;
        top: 7px;
      }
      .radio,
      .radio-checked {
        width: 14px;
        height: 14px;
        border-radius: 50%;
        border: 1px solid #ddd;
        display: inline-block;
        margin-right: 5px;
        position: relative;
      }
      .readonly {
        background: none;
      }
      .radio-checked:after {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border-radius: 50%;
        border: 1px solid #108ee9;
        content: '';
        animation-fill-mode: both;
      }
      .radio-checked:before {
        position: absolute;
        top: 3px;
        left: 3px;
        width: 5px;
        height: 5px;
        border-radius: 50%;
        background: #108ee9;
        content: '';
        animation-fill-mode: both;
      }
      :host ::ng-deep .menuView .ant-select-dropdown-menu-item {
        width: 100%;
        display: flex !important;
        justify-content: center;
      }
      :host ::ng-deep .menuView .ant-checkbox-wrapper {
        margin-right: 5px;
      }
      :host ::ng-deep .menuView .ant-select-dropdown-menu-item {
        line-height: 24px;
      }
      .icon-kongwenjianjia,
      .icon-wenjianjia1 {
        color: #808695;
      }
    `]
    }),
    __metadata("design:paramtypes", [ng_cs_antd_1.NzModalService,
        cmMenuTree_service_1.CmMenuTreeService])
], MenuViewComponent);
exports.MenuViewComponent = MenuViewComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
