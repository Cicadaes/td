"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const platform_browser_1 = require("@angular/platform-browser");
const hljs = require("highlight.js");
const Clipboard = require("clipboard");
let CodeHighlightComponent = class CodeHighlightComponent {
    constructor(el, sanitizer) {
        this.el = el;
        this.sanitizer = sanitizer;
        this.onCopy = new core_1.EventEmitter();
    }
    set hlString(hlString) {
        this._hlString = hlString;
        this.safeHtml = this.sanitizer.bypassSecurityTrustHtml(hljs.highlightAuto(this._hlString).value);
    }
    ngOnInit() {
        let self = this;
        let clipAction = this.el.nativeElement.querySelector('.clip-button');
        self.clipboard = new Clipboard(clipAction, {
            text: function (trigger) {
                return self._hlString;
            }
        });
        self.clipboard.on('success', function (e) {
            self.onCopy.emit(true);
        });
        self.clipboard.on('error', function (e) {
            self.onCopy.emit(false);
        });
    }
    ngOnDestroy() {
        this.clipboard.destroy();
    }
};
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], CodeHighlightComponent.prototype, "onCopy", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], CodeHighlightComponent.prototype, "hlString", null);
CodeHighlightComponent = __decorate([
    core_1.Component({
        selector: 'cm-code-highlight',
        template: `
      <main class="container">
          <div class="clip-content">
              <pre>
                  <code class="hljs" [innerHtml]="safeHtml">...</code>
              </pre>
          </div>
          <div class="clip-button"><i class="cm-iconfont cm-icon-document"></i></div>
      </main>
    `,
        styles: [`
      .container {
        display: flex;
        width: 100%;
        padding: 10px;
      }
      .clip-content {
        width: 100%;
      }
      .clip-button {
        width: 20px;
      }
      .hljs {
        display: block;
        overflow-x: auto;
        padding: 0px;
        color: #000;
        background: #ffffff;
      }
      .hljs-comment,
      .hljs-quote {
        color: #408080;
        font-style: italic;
      }
      .hljs-keyword,
      .hljs-selector-tag,
      .hljs-literal,
      .hljs-subst {
        color: #954121;
      }
      .hljs-number {
        color: #40a070;
      }
      .hljs-string,
      .hljs-doctag {
        color: #219161;
      }
      .hljs-selector-id,
      .hljs-selector-class,
      .hljs-section,
      .hljs-type {
        color: #19469d;
      }
      .hljs-params {
        color: #00f;
      }
      .hljs-title {
        color: #458;
        font-weight: bold;
      }
      .hljs-tag,
      .hljs-name,
      .hljs-attribute {
        color: #000080;
        font-weight: normal;
      }
      .hljs-variable,
      .hljs-template-variable {
        color: #008080;
      }
      .hljs-regexp,
      .hljs-link {
        color: #b68;
      }
      .hljs-symbol,
      .hljs-bullet {
        color: #990073;
      }
      .hljs-built_in,
      .hljs-builtin-name {
        color: #0086b3;
      }
      .hljs-meta {
        color: #999;
        font-weight: bold;
      }
      .hljs-deletion {
        background: #fdd;
      }
      .hljs-addition {
        background: #dfd;
      }
      .hljs-emphasis {
        font-style: italic;
      }
      .hljs-strong {
        font-weight: bold;
      }
    `]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        platform_browser_1.DomSanitizer])
], CodeHighlightComponent);
exports.CodeHighlightComponent = CodeHighlightComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2UvY29kZS1oaWdobGlnaHQvY29kZS1oaWdobGlnaHQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXNHO0FBQ3RHLGdFQUFtRTtBQUVuRSxxQ0FBcUM7QUFDckMsdUNBQXVDO0FBeUd2QyxJQUFhLHNCQUFzQixHQUFuQztJQVFJLFlBQ1ksRUFBYyxFQUNkLFNBQXVCO1FBRHZCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxjQUFTLEdBQVQsU0FBUyxDQUFjO1FBSnpCLFdBQU0sR0FBRyxJQUFJLG1CQUFZLEVBQVcsQ0FBQztJQU0vQyxDQUFDO0lBRVEsSUFBSSxRQUFRLENBQUMsUUFBZ0I7UUFDbEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JHLENBQUM7SUFFRCxRQUFRO1FBQ0osSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLElBQUksVUFBVSxHQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBNkIsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdEYsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxVQUFVLEVBQUU7WUFDdkMsSUFBSSxFQUFFLFVBQVUsT0FBTztnQkFDbkIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQzFCLENBQUM7U0FDSixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFNO1lBQ3pDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBTTtZQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM3QixDQUFDO0NBRUosQ0FBQTtBQW5DYTtJQUFULGFBQU0sRUFBRTs7c0RBQXNDO0FBUXRDO0lBQVIsWUFBSyxFQUFFOzs7c0RBR1A7QUFqQlEsc0JBQXNCO0lBdkdsQyxnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLG1CQUFtQjtRQUM3QixRQUFRLEVBQUU7Ozs7Ozs7OztLQVNUO1FBQ0QsTUFBTSxFQUFFLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0F3RlIsQ0FBQztLQUNMLENBQUM7cUNBV2tCLGlCQUFVO1FBQ0gsK0JBQVk7R0FWMUIsc0JBQXNCLENBeUNsQztBQXpDWSx3REFBc0IiLCJmaWxlIjoiYmFzZS9jb2RlLWhpZ2hsaWdodC9jb2RlLWhpZ2hsaWdodC5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT25EZXN0cm95LCBJbnB1dCwgT3V0cHV0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNhZmVIdG1sLCBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuaW1wb3J0ICogYXMgaGxqcyBmcm9tICdoaWdobGlnaHQuanMnO1xuaW1wb3J0ICogYXMgQ2xpcGJvYXJkIGZyb20gJ2NsaXBib2FyZCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnY20tY29kZS1oaWdobGlnaHQnLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICA8bWFpbiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjbGlwLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgPHByZT5cbiAgICAgICAgICAgICAgICAgIDxjb2RlIGNsYXNzPVwiaGxqc1wiIFtpbm5lckh0bWxdPVwic2FmZUh0bWxcIj4uLi48L2NvZGU+XG4gICAgICAgICAgICAgIDwvcHJlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjbGlwLWJ1dHRvblwiPjxpIGNsYXNzPVwiY20taWNvbmZvbnQgY20taWNvbi1kb2N1bWVudFwiPjwvaT48L2Rpdj5cbiAgICAgIDwvbWFpbj5cbiAgICBgLFxuICAgIHN0eWxlczogW2BcbiAgICAgIC5jb250YWluZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgIH1cbiAgICAgIC5jbGlwLWNvbnRlbnQge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgIH1cbiAgICAgIC5jbGlwLWJ1dHRvbiB7XG4gICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgfVxuICAgICAgLmhsanMge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgb3ZlcmZsb3cteDogYXV0bztcbiAgICAgICAgcGFkZGluZzogMHB4O1xuICAgICAgICBjb2xvcjogIzAwMDtcbiAgICAgICAgYmFja2dyb3VuZDogI2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIC5obGpzLWNvbW1lbnQsXG4gICAgICAuaGxqcy1xdW90ZSB7XG4gICAgICAgIGNvbG9yOiAjNDA4MDgwO1xuICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgICB9XG4gICAgICAuaGxqcy1rZXl3b3JkLFxuICAgICAgLmhsanMtc2VsZWN0b3ItdGFnLFxuICAgICAgLmhsanMtbGl0ZXJhbCxcbiAgICAgIC5obGpzLXN1YnN0IHtcbiAgICAgICAgY29sb3I6ICM5NTQxMjE7XG4gICAgICB9XG4gICAgICAuaGxqcy1udW1iZXIge1xuICAgICAgICBjb2xvcjogIzQwYTA3MDtcbiAgICAgIH1cbiAgICAgIC5obGpzLXN0cmluZyxcbiAgICAgIC5obGpzLWRvY3RhZyB7XG4gICAgICAgIGNvbG9yOiAjMjE5MTYxO1xuICAgICAgfVxuICAgICAgLmhsanMtc2VsZWN0b3ItaWQsXG4gICAgICAuaGxqcy1zZWxlY3Rvci1jbGFzcyxcbiAgICAgIC5obGpzLXNlY3Rpb24sXG4gICAgICAuaGxqcy10eXBlIHtcbiAgICAgICAgY29sb3I6ICMxOTQ2OWQ7XG4gICAgICB9XG4gICAgICAuaGxqcy1wYXJhbXMge1xuICAgICAgICBjb2xvcjogIzAwZjtcbiAgICAgIH1cbiAgICAgIC5obGpzLXRpdGxlIHtcbiAgICAgICAgY29sb3I6ICM0NTg7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgfVxuICAgICAgLmhsanMtdGFnLFxuICAgICAgLmhsanMtbmFtZSxcbiAgICAgIC5obGpzLWF0dHJpYnV0ZSB7XG4gICAgICAgIGNvbG9yOiAjMDAwMDgwO1xuICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgICAgfVxuICAgICAgLmhsanMtdmFyaWFibGUsXG4gICAgICAuaGxqcy10ZW1wbGF0ZS12YXJpYWJsZSB7XG4gICAgICAgIGNvbG9yOiAjMDA4MDgwO1xuICAgICAgfVxuICAgICAgLmhsanMtcmVnZXhwLFxuICAgICAgLmhsanMtbGluayB7XG4gICAgICAgIGNvbG9yOiAjYjY4O1xuICAgICAgfVxuICAgICAgLmhsanMtc3ltYm9sLFxuICAgICAgLmhsanMtYnVsbGV0IHtcbiAgICAgICAgY29sb3I6ICM5OTAwNzM7XG4gICAgICB9XG4gICAgICAuaGxqcy1idWlsdF9pbixcbiAgICAgIC5obGpzLWJ1aWx0aW4tbmFtZSB7XG4gICAgICAgIGNvbG9yOiAjMDA4NmIzO1xuICAgICAgfVxuICAgICAgLmhsanMtbWV0YSB7XG4gICAgICAgIGNvbG9yOiAjOTk5O1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgIH1cbiAgICAgIC5obGpzLWRlbGV0aW9uIHtcbiAgICAgICAgYmFja2dyb3VuZDogI2ZkZDtcbiAgICAgIH1cbiAgICAgIC5obGpzLWFkZGl0aW9uIHtcbiAgICAgICAgYmFja2dyb3VuZDogI2RmZDtcbiAgICAgIH1cbiAgICAgIC5obGpzLWVtcGhhc2lzIHtcbiAgICAgICAgZm9udC1zdHlsZTogaXRhbGljO1xuICAgICAgfVxuICAgICAgLmhsanMtc3Ryb25nIHtcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICB9XG4gICAgYF1cbn0pXG5cbmV4cG9ydCBjbGFzcyBDb2RlSGlnaGxpZ2h0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gICAgX2hsU3RyaW5nOiBzdHJpbmc7XG4gICAgc2FmZUh0bWw6IFNhZmVIdG1sO1xuICAgIGNsaXBib2FyZDogYW55O1xuXG4gICAgQE91dHB1dCgpIG9uQ29weSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgICAgICBwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyKSB7XG5cbiAgICB9XG5cbiAgICBASW5wdXQoKSBzZXQgaGxTdHJpbmcoaGxTdHJpbmc6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9obFN0cmluZyA9IGhsU3RyaW5nO1xuICAgICAgICB0aGlzLnNhZmVIdG1sID0gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwoaGxqcy5oaWdobGlnaHRBdXRvKHRoaXMuX2hsU3RyaW5nKS52YWx1ZSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IGNsaXBBY3Rpb24gPSAodGhpcy5lbC5uYXRpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5xdWVyeVNlbGVjdG9yKCcuY2xpcC1idXR0b24nKTtcbiAgICAgICAgc2VsZi5jbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkKGNsaXBBY3Rpb24sIHtcbiAgICAgICAgICAgIHRleHQ6IGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2hsU3RyaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBzZWxmLmNsaXBib2FyZC5vbignc3VjY2VzcycsIGZ1bmN0aW9uIChlOiBhbnkpIHtcbiAgICAgICAgICAgIHNlbGYub25Db3B5LmVtaXQodHJ1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNlbGYuY2xpcGJvYXJkLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlOiBhbnkpIHtcbiAgICAgICAgICAgIHNlbGYub25Db3B5LmVtaXQoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5jbGlwYm9hcmQuZGVzdHJveSgpO1xuICAgIH1cblxufSJdfQ==
