"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const echarts = require("echarts");
const timer_1 = require("./../../utils/timer");
class BaseChart {
    constructor() {
        // 绑定 resize 函数
        this.resizeBindHandler = this.resizeHandler.bind(this);
        // 默认值
        this.resizeEnable = true;
    }
    // 供外部引用的 echarts 实例
    get echarts() {
        return this.chart;
    }
    // 设置 echarts 容器，此时会自动初始化 chart
    set chartContainer(container) {
        if (container) {
            setTimeout(() => {
                this.chart = echarts.init(container);
                this.init();
            }, 300);
        }
    }
    init() {
        if (this.chart && this.chartOption) {
            this.inputOption();
        }
    }
    inputOption() {
        if (this.chart && this.chartOption) {
            this.chart.setOption(this.chartOption, true);
            this.onInitChart();
        }
    }
    onInitChart() {
        // console.log('onInitChart...');
    }
    disposeChart() {
        this.resizeEnable = false;
        if (this.chart) {
            this.chart.dispose();
            this.chart = null;
        }
        this.onDestroyChart();
    }
    onDestroyChart() {
        // console.log('onDisposeChart...');
    }
    // 缩放窗口时自动缩放
    set resizeEnable(resize) {
        if (resize) {
            this.timer = new timer_1.Timer();
            window.addEventListener('resize', this.resizeBindHandler, false);
        }
        else {
            this.timer = null;
            window.removeEventListener('resize', this.resizeBindHandler, false);
        }
    }
    resizeHandler() {
        // console.log('resizeHandler')
        this.timer.startTimeOut(0.5, () => {
            this.timer.stopTimeOut();
            if (this.chart) {
                this.chart.resize();
            }
        }, this);
    }
}
exports.BaseChart = BaseChart;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoYXJ0L2NvbW1vbi9jaGFydC5iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW1DO0FBQ25DLCtDQUE0QztBQUU1QztJQU9JO1FBQ0ksZUFBZTtRQUNmLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2RCxNQUFNO1FBQ04sSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUVELG9CQUFvQjtJQUNwQixJQUFXLE9BQU87UUFDZCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELCtCQUErQjtJQUMvQixJQUFjLGNBQWMsQ0FBQyxTQUF5QjtRQUNsRCxJQUFJLFNBQVMsRUFBRTtZQUNYLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ1osSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNyQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDaEIsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ1g7SUFDTCxDQUFDO0lBRU8sSUFBSTtRQUNSLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0QjtJQUNMLENBQUM7SUFFUyxXQUFXO1FBQ2pCLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3RCO0lBQ0wsQ0FBQztJQUVTLFdBQVc7UUFDakIsaUNBQWlDO0lBQ3JDLENBQUM7SUFFUyxZQUFZO1FBQ2xCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNaLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDckI7UUFDRCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVTLGNBQWM7UUFDcEIsb0NBQW9DO0lBQ3hDLENBQUM7SUFFRCxZQUFZO0lBQ1osSUFBYyxZQUFZLENBQUMsTUFBZTtRQUN0QyxJQUFJLE1BQU0sRUFBRTtZQUNSLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxhQUFLLEVBQUUsQ0FBQztZQUN6QixNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsQ0FBQTtTQUNuRTthQUFNO1lBQ0gsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDbEIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDdkU7SUFDTCxDQUFDO0lBRVMsYUFBYTtRQUNuQiwrQkFBK0I7UUFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtZQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3pCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDWixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ3ZCO1FBQ0wsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2IsQ0FBQztDQUNKO0FBaEZELDhCQWdGQyIsImZpbGUiOiJjaGFydC9jb21tb24vY2hhcnQuYmFzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGVjaGFydHMgZnJvbSAnZWNoYXJ0cyc7XG5pbXBvcnQgeyBUaW1lciB9IGZyb20gJy4vLi4vLi4vdXRpbHMvdGltZXInO1xuXG5leHBvcnQgY2xhc3MgQmFzZUNoYXJ0IHtcblxuICAgIHByaXZhdGUgY2hhcnQ6IGVjaGFydHMuRUNoYXJ0cztcbiAgICBwcml2YXRlIHRpbWVyOiBUaW1lcjtcbiAgICBwcml2YXRlIHJlc2l6ZUJpbmRIYW5kbGVyOiBhbnk7XG4gICAgcHJvdGVjdGVkIGNoYXJ0T3B0aW9uOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8g57uR5a6aIHJlc2l6ZSDlh73mlbBcbiAgICAgICAgdGhpcy5yZXNpemVCaW5kSGFuZGxlciA9IHRoaXMucmVzaXplSGFuZGxlci5iaW5kKHRoaXMpO1xuICAgICAgIFxuICAgICAgICAvLyDpu5jorqTlgLxcbiAgICAgICAgdGhpcy5yZXNpemVFbmFibGUgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIOS+m+WklumDqOW8leeUqOeahCBlY2hhcnRzIOWunuS+i1xuICAgIHB1YmxpYyBnZXQgZWNoYXJ0cygpOiBlY2hhcnRzLkVDaGFydHMge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFydDtcbiAgICB9XG5cbiAgICAvLyDorr7nva4gZWNoYXJ0cyDlrrnlmajvvIzmraTml7bkvJroh6rliqjliJ3lp4vljJYgY2hhcnRcbiAgICBwcm90ZWN0ZWQgc2V0IGNoYXJ0Q29udGFpbmVyKGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGNvbnRhaW5lcikge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFydCA9IGVjaGFydHMuaW5pdChjb250YWluZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhcnQgJiYgdGhpcy5jaGFydE9wdGlvbikge1xuICAgICAgICAgICAgdGhpcy5pbnB1dE9wdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGlucHV0T3B0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5jaGFydCAmJiB0aGlzLmNoYXJ0T3B0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNoYXJ0LnNldE9wdGlvbih0aGlzLmNoYXJ0T3B0aW9uLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMub25Jbml0Q2hhcnQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBvbkluaXRDaGFydCgpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ29uSW5pdENoYXJ0Li4uJyk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGRpc3Bvc2VDaGFydCgpIHtcbiAgICAgICAgdGhpcy5yZXNpemVFbmFibGUgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuY2hhcnQpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhcnQuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5jaGFydCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbkRlc3Ryb3lDaGFydCgpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvbkRlc3Ryb3lDaGFydCgpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ29uRGlzcG9zZUNoYXJ0Li4uJyk7XG4gICAgfVxuXG4gICAgLy8g57yp5pS+56qX5Y+j5pe26Ieq5Yqo57yp5pS+XG4gICAgcHJvdGVjdGVkIHNldCByZXNpemVFbmFibGUocmVzaXplOiBib29sZWFuKSB7XG4gICAgICAgIGlmIChyZXNpemUpIHtcbiAgICAgICAgICAgIHRoaXMudGltZXIgPSBuZXcgVGltZXIoKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlc2l6ZUJpbmRIYW5kbGVyLCBmYWxzZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGltZXIgPSBudWxsO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVzaXplQmluZEhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCByZXNpemVIYW5kbGVyKCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygncmVzaXplSGFuZGxlcicpXG4gICAgICAgIHRoaXMudGltZXIuc3RhcnRUaW1lT3V0KDAuNSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50aW1lci5zdG9wVGltZU91dCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhcnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0LnJlc2l6ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzKTtcbiAgICB9XG59Il19
