<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                           http://www.springframework.org/schema/context
						   http://www.springframework.org/schema/context/spring-context-4.3.xsd ">
    <!--&lt;!&ndash; 加载配置文件 &ndash;&gt;-->
    <!--<context:property-placeholder location="classpath:config/config.properties" />-->
    <!-- 扫描包-->
    <context:component-scan base-package="com.talkingdata.marketing">
        <context:exclude-filter type="assignable" expression="com.talkingdata.marketing.core.datasource.DataSourceMarketingConfig"/>
        <!--<context:exclude-filter type="regex" expression="com.talkingdata.marketing.core.service.*"/>-->
        <!--<context:exclude-filter type="regex" expression="com.talkingdata.marketing.core.util.*"/>-->
        <!--<context:exclude-filter type="regex" expression="com.talkingdata.marketing.core.commons.*"/>-->
        <!--<context:exclude-filter type="regex" expression="com.talkingdata.marketing.core.config.*"/>-->
        <!--<context:exclude-filter type="regex" expression="com.talkingdata.marketing.core.middleware.*"/>-->
    </context:component-scan>

    <!-- 数据库 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" primary="true">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${datasource.url}" />
        <property name="username" value="${datasource.username}" />
        <property name="password" value="${datasource.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <!-- 连接池中保留的最小连接数，默认为：3 -->
        <property name="initialSize" value="${datasource.initialSize}" />
        <property name="minIdle" value="${datasource.minIdle}" />
        <property name="maxActive" value="${datasource.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${datasource.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${datasource.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${datasource.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${datasource.validationQuery}" />
        <property name="testWhileIdle" value="${datasource.testWhileIdle}" />
        <property name="testOnBorrow" value="${datasource.testOnBorrow}" />
        <property name="testOnReturn" value="${datasource.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
        <property name="poolPreparedStatements" value="${datasource.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${datasource.maxOpenPreparedStatements}" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${datasource.filters}" />
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- mybatis config -->
        <property name="configLocation" value="classpath:config/mybatis-config.xml"></property>
        <!-- 自动扫描mapping.xml文件，**表示迭代查找 -->
        <property name="mapperLocations" value="classpath:mybatis/mapper/*/*.xml" />
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.talkingdata.marketing.core" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="marketingTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
</beans>